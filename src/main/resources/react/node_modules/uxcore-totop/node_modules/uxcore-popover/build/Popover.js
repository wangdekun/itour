'use strict';

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * Popover Component for uxcore
 * @author eternalsky
 *
 * Copyright 2014-2015, Uxcore Team, Alinw.
 * All rights reserved.
 */

var React = require('react');
var Tooltip = require('rc-tooltip');
var Button = require('uxcore-button');

var Popover = function (_React$Component) {
  _inherits(Popover, _React$Component);

  function Popover(props) {
    _classCallCheck(this, Popover);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      visible: 'visible' in props ? props.visible : false
    };
    return _this;
  }

  Popover.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var me = this;

    if ('visible' in nextProps && nextProps.visible !== me.props.visible) {
      me.setState({
        visible: nextProps.visible
      });
    }
  };

  Popover.prototype.handleOkClick = function handleOkClick() {
    var me = this;
    me.props.onOk(function () {
      if (!('visible' in me.props)) {
        me.setState({
          visible: false
        });
      }
    });
  };

  Popover.prototype.handleCancelClick = function handleCancelClick() {
    var me = this;

    if (!('visible' in me.props)) {
      me.setState({
        visible: false
      }, function () {
        me.props.onCancel();
      });
    } else {
      me.props.onCancel();
    }
  };

  Popover.prototype.handleVisibleChange = function handleVisibleChange(visible) {
    var me = this;
    if (!('visible' in me.props)) {
      me.setState({
        visible: visible
      }, function () {
        me.props.onVisibleChange(visible);
      });
    } else {
      me.props.onVisibleChange(visible);
    }
  };

  Popover.prototype.generateOverlay = function generateOverlay() {
    var me = this;
    var arr = [];
    if (me.props.title) {
      arr.push(React.createElement(
        'div',
        { key: 'title', className: me.props.prefixCls + '-title' },
        me.props.title
      ));
    }
    if (me.props.overlay) {
      arr.push(React.createElement(
        'div',
        { key: 'content', className: me.props.prefixCls + '-content' },
        me.props.overlay,
        me.renderButton()
      ));
    }
    return React.createElement(
      'div',
      null,
      arr
    );
  };

  Popover.prototype.renderButton = function renderButton() {
    var me = this;
    if (me.props.showButton) {
      return React.createElement(
        'div',
        { className: me.props.prefixCls + '-button-group' },
        React.createElement(
          Button,
          {
            size: 'small', type: 'primary', onClick: me.handleOkClick.bind(me)
          },
          me.props.okText
        ),
        React.createElement(
          Button,
          {
            size: 'small', type: 'secondary', onClick: me.handleCancelClick.bind(me)
          },
          me.props.cancelText
        )
      );
    }
    return null;
  };

  Popover.prototype.render = function render() {
    var me = this;

    return React.createElement(
      Tooltip,
      {
        placement: me.props.placement,
        arrowContent: me.props.arrowContent,
        overlayClassName: me.props.overlayClassName,
        prefixCls: me.props.prefixCls,
        visible: me.state.visible,
        onVisibleChange: me.handleVisibleChange.bind(me),
        mouseEnterDelay: me.props.delay,
        transitionName: me.props.transitionName,
        trigger: me.props.trigger,
        overlay: me.generateOverlay()
      },
      me.props.children
    );
  };

  return Popover;
}(React.Component);

Popover.defaultProps = {
  prefixCls: 'kuma-popover',
  transitionName: 'popover-slide',
  delay: 0,
  placement: 'top',
  trigger: 'hover',
  onOk: function onOk(cb) {
    cb();
  },
  onCancel: function onCancel() {},
  okText: '确定',
  cancelText: '取消',
  showButton: false,
  arrowContent: React.createElement('div', { className: 'kuma-popover-arrow-inner' }),
  onVisibleChange: function onVisibleChange() {}
};

// http://facebook.github.io/react/docs/reusable-components.html
Popover.propTypes = {
  prefixCls: React.PropTypes.string,
  delay: React.PropTypes.number,
  overlayClassName: React.PropTypes.string,
  placement: React.PropTypes.oneOf(['top', 'bottom', 'left', 'right', 'topLeft', 'bottomLeft', 'leftTop', 'rightTop', 'topRight', 'bottomRight', 'leftBottom', 'rightBottom']),
  trigger: React.PropTypes.oneOf(['hover', 'click']),
  onOk: React.PropTypes.func,
  onCancel: React.PropTypes.func,
  okText: React.PropTypes.string,
  cancelText: React.PropTypes.string,
  visible: React.PropTypes.bool,
  showButton: React.PropTypes.bool,
  onVisibleChange: React.PropTypes.func
};

Popover.displayName = 'Popover';

module.exports = Popover;