'use strict';

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ButtonGroup = function (_React$Component) {
	_inherits(ButtonGroup, _React$Component);

	function ButtonGroup(props) {
		_classCallCheck(this, ButtonGroup);

		return _possibleConstructorReturn(this, _React$Component.call(this, props));
	}

	ButtonGroup.prototype.render = function render() {
		var count = _react2["default"].Children.count(this.props.children);
		return _react2["default"].createElement(
			'div',
			{ className: 'kuma-button-group' },
			this.props.children.map(function (child, idx) {
				var cls = undefined;
				if (idx === 0) {
					cls = 'kuma-group-left';
				} else if (idx === count - 1) {
					cls = 'kuma-group-right';
				} else {
					cls = 'kuma-group-middle';
				}
				return _react2["default"].cloneElement(child, {
					additionClass: cls,
					key: idx
				});
			})
		);
	};

	return ButtonGroup;
}(_react2["default"].Component);

ButtonGroup.displayName = 'ButtonGroup';
ButtonGroup.propTypes = {};
ButtonGroup.defaultProps = {};

module.exports = ButtonGroup;