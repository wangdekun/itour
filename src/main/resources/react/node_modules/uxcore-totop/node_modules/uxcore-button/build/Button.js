'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var sizeMap = {
	small: 'sm',
	medium: '',
	large: 'lg'
},
    typeMap = {
	primary: 'primary',
	secondary: 'secondary',
	disabled: 'disabled'
},
    clsPrefix = 'kuma-button';

var Button = function (_React$Component) {
	_inherits(Button, _React$Component);

	function Button(props) {
		_classCallCheck(this, Button);

		return _possibleConstructorReturn(this, _React$Component.call(this, props));
	}

	Button.prototype.render = function render() {
		var props = this.props;
		var type = props.disabled ? 'disabled' : props.type;
		var clsObj = {};
		if (props.className) {
			clsObj[props.className] = true;
		}
		if (sizeMap[props.size]) {
			clsObj[clsPrefix + '-' + sizeMap[props.size]] = true;
		}
		var className = (0, _classnames2["default"])(clsPrefix, clsPrefix + '-' + typeMap[type], clsObj);
		var propEvents = {};
		Object.keys(props).forEach(function (key) {
			if (key.indexOf('on') === 0) {
				propEvents[key] = props[key];
			}
		});
		return _react2["default"].createElement(
			'button',
			_extends({ className: className, disabled: props.disabled }, propEvents),
			props.children
		);
	};

	return Button;
}(_react2["default"].Component);

Button.displayName = 'uxcore-button';
Button.propTypes = {
	size: _react2["default"].PropTypes.oneOf(Object.keys(sizeMap)),
	type: _react2["default"].PropTypes.oneOf(Object.keys(typeMap)),
	disabled: _react2["default"].PropTypes.oneOf(['disabled', true, false]),
	className: _react2["default"].PropTypes.string
};
Button.defaultProps = {
	size: 'medium',
	type: 'primary',
	disabled: false,
	className: ''
};

module.exports = Button;