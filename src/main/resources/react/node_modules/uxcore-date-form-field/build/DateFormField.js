'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreFormField = require('uxcore-form-field');

var _uxcoreFormField2 = _interopRequireDefault(_uxcoreFormField);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _uxcoreCalendar = require('uxcore-calendar');

var _uxcoreCalendar2 = _interopRequireDefault(_uxcoreCalendar);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _omitBy = require('lodash/omitBy');

var _omitBy2 = _interopRequireDefault(_omitBy);

var _isNil = require('lodash/isNil');

var _isNil2 = _interopRequireDefault(_isNil);

var _uxcoreFormatter = require('uxcore-formatter');

var _uxcoreFormatter2 = _interopRequireDefault(_uxcoreFormatter);

var _addEventListener = require('rc-util/lib/Dom/addEventListener');

var _addEventListener2 = _interopRequireDefault(_addEventListener);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * DateFormField Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var CalendarPanel = {
  month: _uxcoreCalendar2["default"].MonthCalendar,
  year: _uxcoreCalendar2["default"].YearCalendar,
  day: _uxcoreCalendar2["default"]
};

var getMode = function getMode(props) {
  return props.jsxmode || props.mode;
};
var getVerticalAlign = function getVerticalAlign(props) {
  // jsxVerticalAlign is an internal varible.
  var align = props.verticalAlign;
  if (align === undefined) {
    align = props.jsxVerticalAlign;
  }
  return align;
};

var getMaxWidth = function getMaxWidth(props) {
  return props.inputBoxMaxWidth;
};

var getIEVer = function getIEVer() {
  if (window) {
    var ua = window.navigator.userAgent;
    var idx = ua.indexOf('MSIE');
    if (idx > 0) {
      // "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64;
      // Trident/6.0; SLCC2; .NET CLR 2.0.50727)"
      return parseInt(ua.substring(idx + 5, ua.indexOf('.', idx)), 10);
    }
    if (ua.match(/Trident\/7\./)) {
      // "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2;
      // .NET CLR 2.0.50727; rv:11.0) like Gecko"
      return 11;
    }
    return 0;
  }
  return 0;
};

var getPropFromArray = function getPropFromArray(arr, index) {
  if (arr instanceof Array) {
    return arr[index];
  }
  return arr;
};

var getViewText = function getViewText(value, format) {
  var date = new Date(value);
  if (isNaN(date) || value === null) {
    return value;
  }
  return _uxcoreFormatter2["default"].date(value, format);
};

var DateFormField = function (_FormField) {
  _inherits(DateFormField, _FormField);

  function DateFormField(props) {
    _classCallCheck(this, DateFormField);

    var _this = _possibleConstructorReturn(this, _FormField.call(this, props));

    _this.resize = _this.resize.bind(_this);
    return _this;
  }

  DateFormField.prototype.componentDidMount = function componentDidMount() {
    _FormField.prototype.componentDidMount.call(this);
    var _props = this.props,
        jsxtype = _props.jsxtype,
        autoMatchWidth = _props.autoMatchWidth;

    var mode = getMode(this.props);
    if (jsxtype === 'cascade' && autoMatchWidth && mode === _uxcoreConst2["default"].MODE.EDIT) {
      this.resize();
    }
  };

  DateFormField.prototype.componentDidUpdate = function componentDidUpdate() {
    var _this2 = this;

    var _props2 = this.props,
        jsxtype = _props2.jsxtype,
        autoMatchWidth = _props2.autoMatchWidth;

    var mode = getMode(this.props);
    if (jsxtype === 'cascade' && autoMatchWidth && mode === _uxcoreConst2["default"].MODE.EDIT) {
      var shouldResize = function shouldResize() {
        if (_this2.fieldWidth && _this2.fieldWidth !== parseInt(_this2.cascadeBox.clientWidth, 10)) {
          return true;
        }
        return false;
      };
      if (shouldResize()) {
        this.resize(true);
      }
    }
  };

  DateFormField.prototype.componentWillUnmount = function componentWillUnmount() {
    _FormField.prototype.componentWillUnmount.call(this);
    if (this.resizeTimer) {
      clearTimeout(this.resizeTimer);
      this.resizeTimer = null;
    }
  };

  DateFormField.prototype.resize = function resize(force) {
    var _this3 = this;

    var cascadeBox = this.cascadeBox;
    if (this.fieldWidth && this.fieldWidth === parseInt(cascadeBox.clientWidth, 10) && force !== true) {
      return;
    }
    var calendar1 = this.calendar1.getTriggerNode();
    var calendar2 = this.calendar2.getTriggerNode();
    var split = this.split;
    this.fieldWidth = parseInt(cascadeBox.clientWidth, 10);
    if (this.fieldWidth % 2 === 1) {
      split.style.width = '5px';
    }
    var splitCurrentStyle = split.currentStyle || window.getComputedStyle(split);
    var splitOuterWidth = split.clientWidth + parseInt(splitCurrentStyle.marginLeft, 10) + parseInt(splitCurrentStyle.marginRight, 10);
    if (!splitOuterWidth) {
      // if style is loaded later than component
      this.resizeTimer = setTimeout(function () {
        _this3.resize();
      }, 500);
    }
    calendar1.style.width = 'calc((100% - ' + splitOuterWidth + 'px)/2)';
    calendar2.style.width = 'calc((100% - ' + splitOuterWidth + 'px)/2)';
  };

  DateFormField.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
    };
  };

  DateFormField.prototype.handleChange = function handleChange(value, format) {
    var me = this;
    var useFormat = me.props.useFormat;

    var data = void 0;
    if (useFormat) {
      data = format;
    } else {
      data = value ? me.processTime(value) : null;
    }
    me.handleDataChange(data);
  };

  DateFormField.prototype.handleCascadeChange = function handleCascadeChange(i, value, format) {
    var me = this;
    var values = (0, _cloneDeep2["default"])(me.state.value) || [];
    var useFormat = me.props.useFormat;

    var data = void 0;
    if (useFormat) {
      data = format;
    } else {
      data = value ? me.processTime(value) : undefined;
    }
    values[i] = data;
    if (value) {
      if (i === 0 && !!values[1] && me.processTime(value) > me.processTime(values[1])) {
        values.pop();
      }
      if (i === 1 && !!values[0] && me.processTime(value) < me.processTime(values[0])) {
        values[0] = undefined;
      }
    }
    me.handleDataChange(values);
  };

  DateFormField.prototype.addSpecificClass = function addSpecificClass() {
    var me = this;
    if (me.props.jsxprefixCls === 'kuma-uxform-field') {
      var str = me.props.jsxprefixCls + ' kuma-date-uxform-field';
      if (me.props.jsxtype === 'cascade') {
        str += ' kuma-cascade-date-uxform-field';
      }
      return str;
    }
    return me.props.jsxprefixCls;
  };

  DateFormField.prototype.processTime = function processTime(time) {
    // if showTime is true or timePicker is set, we use time to compare
    // otherwise we use day to compare
    var me = this;
    var _me$props = me.props,
        showTime = _me$props.showTime,
        timePicker = _me$props.timePicker;

    if (showTime || timePicker) {
      return new Date(time).getTime();
    }
    var newTime = new Date(time);
    newTime.setHours(0);
    newTime.setMinutes(0);
    newTime.setSeconds(0);
    newTime.setMilliseconds(0);
    return newTime.getTime();
    // new Date(dateString) will parse time as UTC+0!
    // return new Date(Formatter.date(time, 'YYYY-MM-DD')).getTime();
  };

  DateFormField.prototype.renderField = function renderField() {
    var _this4 = this;

    var me = this;

    var _me$props2 = me.props,
        jsxtype = _me$props2.jsxtype,
        jsxfrom = _me$props2.jsxfrom,
        jsxto = _me$props2.jsxto,
        disabledDate = _me$props2.disabledDate,
        panel = _me$props2.panel,
        others = _objectWithoutProperties(_me$props2, ['jsxtype', 'jsxfrom', 'jsxto', 'disabledDate', 'panel']);

    // remove props which cannot be passed.


    ['onSelect', 'style', 'prefixCls', 'value', 'className'].forEach(function (key) {
      delete others[key];
    });

    others.size = this.getSize();

    /* eslint-enable no-unused-vars */
    var from = jsxfrom ? me.processTime(jsxfrom) : -Infinity;
    var to = jsxto ? me.processTime(jsxto) : Infinity;
    var mode = me.props.jsxmode || me.props.mode;
    if (mode === _uxcoreConst2["default"].MODE.EDIT) {
      var Panel = CalendarPanel[panel];
      if (jsxtype === 'single') {
        return _react2["default"].createElement(Panel, _extends({
          value: me.state.value,
          onSelect: me.handleChange.bind(me),
          disabledDate: disabledDate || function (current) {
            // if showTime is true or timePicker is set, we use time to compare
            // otherwise we use day to compare
            if (!current) {
              return false;
            }

            return me.processTime(current.getTime()) < from || me.processTime(current.getTime()) > to;
          }
        }, others));
      } else if (jsxtype === 'cascade') {
        var arr = [];
        var others1 = void 0;
        var others2 = void 0;
        var propsFromArray1 = {
          disabled: getPropFromArray(others.disabled, 0),
          placeholder: getPropFromArray(others.placeholder, 0),
          format: getPropFromArray(others.format, 0),
          disabledDate: getPropFromArray(disabledDate, 0)
        };

        var propsFromArray2 = {
          disabled: getPropFromArray(others.disabled, 1),
          placeholder: getPropFromArray(others.placeholder, 1),
          format: getPropFromArray(others.format, 1),
          disabledDate: getPropFromArray(disabledDate, 1)
        };
        if (me.state.value && me.state.value[0]) {
          others1 = (0, _objectAssign2["default"])({}, others, {
            value: me.state.value[0]
          }, (0, _omitBy2["default"])(propsFromArray1, _isNil2["default"]));
        } else {
          others1 = (0, _objectAssign2["default"])({}, others, {
            value: null
          }, (0, _omitBy2["default"])(propsFromArray1, _isNil2["default"]));
        }
        if (me.state.value && me.state.value[1]) {
          others2 = (0, _objectAssign2["default"])({}, others, {
            value: me.state.value[1]
          }, (0, _omitBy2["default"])(propsFromArray2, _isNil2["default"]));
        } else {
          others2 = (0, _objectAssign2["default"])({}, others, {
            value: null
          }, (0, _omitBy2["default"])(propsFromArray2, _isNil2["default"]));
        }
        arr.push(_react2["default"].createElement(Panel, _extends({
          key: 'calendar1',
          ref: me.saveRef('calendar1'),
          onSelect: me.handleCascadeChange.bind(me, 0),
          disabledDate: function disabledDate(current) {
            if (!current) {
              return false;
            }
            var now = me.processTime(current.getTime());
            return now < from || now > to;
          }
        }, others1)));
        arr.push(_react2["default"].createElement('span', { style: { width: '8px', borderBottom: '1px solid rgba(31,56,88,0.20)' }, key: 'split', ref: me.saveRef('split'), className: 'kuma-uxform-split' }));

        arr.push(_react2["default"].createElement(Panel, _extends({
          key: 'calendar2',
          ref: me.saveRef('calendar2'),
          onSelect: me.handleCascadeChange.bind(me, 1),
          disabledDate: function disabledDate(current) {
            if (!current) {
              return false;
            }
            var now = me.processTime(current.getTime());
            var first = me.state.value ? me.state.value[0] : 0;
            first = me.processTime(first);
            return now < from || now > to || now < first;
          }
        }, others2)));
        return _react2["default"].createElement(
          'div',
          {
            className: 'kuma-date-uxform-field-cascade',
            ref: function ref(c) {
              _this4.cascadeBox = c;
            }
          },
          arr
        );
      }
    } else if (mode === _uxcoreConst2["default"].MODE.VIEW) {
      var defaultFormat = 'YYYY-MM-DD';
      if (me.props.showTime || me.props.timePicker) {
        defaultFormat = 'YYYY-MM-DD HH:mm:ss';
      }
      if (panel === 'month') {
        defaultFormat = 'YYYY-MM';
      }
      if (panel === 'year') {
        defaultFormat = 'YYYY';
      }
      if (jsxtype === 'single') {
        return _react2["default"].createElement(
          'span',
          null,
          getViewText(me.state.value, me.props.format || defaultFormat)
        );
      }
      return _react2["default"].createElement(
        'span',
        null,
        me.state.value instanceof Array ? me.state.value.map(function (item) {
          return getViewText(item, me.props.format || defaultFormat);
        }).join(' - ') : me.state.value
      );
    }
    return null;
  };

  return DateFormField;
}(_uxcoreFormField2["default"]);

DateFormField.displayName = 'DateFormField';
DateFormField.propTypes = (0, _objectAssign2["default"])(_uxcoreFormField2["default"].propTypes, {
  jsxtype: _propTypes2["default"].string,
  panel: _propTypes2["default"].string,
  useFormat: _propTypes2["default"].bool,
  autoMatchWidth: _propTypes2["default"].bool
});
DateFormField.defaultProps = (0, _objectAssign2["default"])(_uxcoreFormField2["default"].defaultProps, {
  locale: 'zh-cn',
  hasTrigger: true,
  jsxtype: 'single',
  autoMatchWidth: false,
  panel: 'day',
  useFormat: false
});
exports["default"] = DateFormField;
module.exports = exports['default'];