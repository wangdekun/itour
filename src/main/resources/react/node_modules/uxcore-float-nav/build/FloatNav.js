'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _throttle = require('lodash/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _debounce = require('lodash/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * FloatNav Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author vincent.bian
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var FloatNav = function (_Component) {
  _inherits(FloatNav, _Component);

  function FloatNav(props) {
    _classCallCheck(this, FloatNav);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    var anchors = _this.getAnchors(props);
    _this.state = {
      activeAnchor: '',
      scrollTop: 0,
      anchors: anchors,
      trigger: ''
    };
    _this.handleScrollUp = _this.handleScrollUp.bind(_this);
    _this.handleScrollDown = _this.handleScrollDown.bind(_this);
    _this.handlePageScroll = (0, _throttle2["default"])(_this.handlePageScroll.bind(_this), 50);
    _this.updateScroll = (0, _debounce2["default"])(_this.updateScroll, 50, {
      trailing: true
    });
    return _this;
  }

  FloatNav.prototype.componentDidMount = function componentDidMount() {
    this.updateComponentHeight();
    window.addEventListener('scroll', this.handlePageScroll, false);
    this.handlePageScroll();
  };

  FloatNav.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    this.setState({
      anchors: this.getAnchors(nextProps)
    });
  };

  FloatNav.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.height !== this.props.height) {
      this.updateComponentHeight();
    }
    if (this.activeItem) {
      this.updateScroll();
    }
  };

  FloatNav.prototype.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('scroll', this.handlePageScroll, false);
  };

  FloatNav.prototype.getAnchors = function getAnchors(props) {
    var _this2 = this;

    var children = props.children;

    var anchors = [];
    if (children) {
      if (!children.length) {
        anchors.push(children.props.anchor);
        anchors = anchors.concat(this.getAnchors(children.props));
      } else {
        _react2["default"].Children.forEach(children, function (child) {
          var childAnchor = child.props.anchor;
          if (childAnchor) {
            anchors.push(childAnchor);
          }
          anchors = anchors.concat(_this2.getAnchors(child.props));
        });
      }
    }
    return anchors;
  };

  FloatNav.prototype.updateComponentHeight = function updateComponentHeight() {
    this.contentHeight = this.contentEle.offsetHeight;
    this.viewHeight = this.containerEle.offsetHeight;
    this.maxScrollHeight = this.contentHeight - this.viewHeight;
  };

  FloatNav.prototype.updateScroll = function updateScroll() {
    var trigger = this.state.trigger;

    if (trigger !== 'scroll') return;
    var containerRect = this.containerEle.getBoundingClientRect();
    var activeRect = this.activeItem.getBoundingClientRect();
    var delta = activeRect.top - containerRect.top;
    if (delta < 0) {
      this.handleScrollUp();
    } else if (delta > this.viewHeight) {
      this.handleScrollDown();
    }
  };

  FloatNav.prototype.centerActive = function centerActive() {
    var containerRect = this.containerEle.getBoundingClientRect();
    var activeRect = this.activeItem.getBoundingClientRect();
    var delta = activeRect.top - containerRect.top;
    if (delta / this.viewHeight < 1 / 3) {
      this.handleScrollUp();
    } else if (delta / this.viewHeight > 2 / 3) {
      this.handleScrollDown();
    }
  };

  FloatNav.prototype.handleScrollUp = function handleScrollUp(e) {
    if (e) {
      e.preventDefault();
    }
    var state = {};
    if (e) {
      e.preventDefault();
      (0, _objectAssign2["default"])(state, {
        trigger: 'control'
      });
    }
    var _props = this.props,
        stepLength = _props.stepLength,
        onScrollChange = _props.onScrollChange;
    var scrollTop = this.state.scrollTop;

    scrollTop -= stepLength;
    if (scrollTop <= 0) {
      scrollTop = 0;
    }
    (0, _objectAssign2["default"])(state, {
      scrollTop: scrollTop
    });
    this.setState(state);
    if (onScrollChange) {
      onScrollChange(state.scrollTop);
    }
  };

  FloatNav.prototype.handleScrollDown = function handleScrollDown(e) {
    if (e) {
      e.preventDefault();
    }
    var state = {};
    if (e) {
      e.preventDefault();
      (0, _objectAssign2["default"])(state, {
        trigger: 'control'
      });
    }
    var _props2 = this.props,
        stepLength = _props2.stepLength,
        onScrollChange = _props2.onScrollChange;
    var scrollTop = this.state.scrollTop;

    scrollTop += stepLength;
    if (scrollTop >= this.maxScrollHeight) {
      scrollTop = this.maxScrollHeight;
    }
    (0, _objectAssign2["default"])(state, {
      scrollTop: scrollTop
    });
    this.setState(state);
    if (onScrollChange) {
      onScrollChange(state.scrollTop);
    }
  };

  FloatNav.prototype.handlePageScroll = function handlePageScroll() {
    var _this3 = this;

    var anchors = this.state.anchors;

    var rect = void 0;
    var anchorNode = void 0;
    var activeAnchor = void 0;
    anchors.some(function (anchor) {
      if (_this3.props.wrapper) {
        anchorNode = _this3.props.wrapper.querySelector('#' + anchor);
      }
      if (anchorNode) {
        rect = anchorNode.getBoundingClientRect();
        if (_this3.props.wrapper) {
          rect = _this3.props.wrapper.querySelector('#' + anchor).getBoundingClientRect();
        }
        activeAnchor = anchor;
        return rect.top > 0;
      }
      return false;
    });
    if (activeAnchor) {
      this.setState({
        activeAnchor: activeAnchor,
        trigger: 'scroll'
      });
    }
  };

  FloatNav.prototype.renderNavItems = function renderNavItems() {
    var _this4 = this;

    var _props3 = this.props,
        prefixCls = _props3.prefixCls,
        children = _props3.children,
        showOrderNumber = _props3.showOrderNumber;
    var activeAnchor = this.state.activeAnchor;

    var cloneProps = {
      prefixCls: prefixCls
    };
    var itemProps = void 0;
    return _react2["default"].Children.map(children, function (item, index) {
      itemProps = (0, _objectAssign2["default"])({
        onActive: function onActive(anchor, activeItem, triggerType) {
          _this4.activeItem = activeItem;
          _this4.setState({
            activeAnchor: anchor,
            trigger: 'click'
          }, function () {
            if (triggerType === 'click') {
              _this4.centerActive();
            }
          });
        },
        active: item.props.anchor && activeAnchor === item.props.anchor,
        subActiveAnchor: activeAnchor,
        level: 0
      }, cloneProps);
      if (showOrderNumber) {
        (0, _objectAssign2["default"])(itemProps, {
          orderNumber: '' + (index + 1)
        });
      }
      return _react2["default"].cloneElement(item, itemProps);
    });
  };

  FloatNav.prototype.renderScrollBar = function renderScrollBar() {
    var prefixCls = this.props.prefixCls;

    return _react2["default"].createElement(
      'div',
      { className: (0, _classnames2["default"])(prefixCls + '-scroll-bar') },
      _react2["default"].createElement(
        'svg',
        { width: '20', height: '20', className: 'line-circle line-circle-top' },
        _react2["default"].createElement('circle', { cx: '10', cy: '10', r: '4' })
      ),
      _react2["default"].createElement('div', { className: (0, _classnames2["default"])(prefixCls + '-scroll-line') }),
      _react2["default"].createElement(
        'svg',
        { width: '20', height: '20', className: 'line-circle line-circle-bottom' },
        _react2["default"].createElement('circle', { cx: '10', cy: '10', r: '4' })
      )
    );
  };

  FloatNav.prototype.renderControl = function renderControl() {
    var prefixCls = this.props.prefixCls;

    return _react2["default"].createElement(
      'div',
      { className: (0, _classnames2["default"])(prefixCls + '-control') },
      _react2["default"].createElement('a', { className: (0, _classnames2["default"])(prefixCls + '-control-prev kuma-button-secondary kuma-button'), onClick: this.handleScrollUp }),
      _react2["default"].createElement('a', { className: (0, _classnames2["default"])(prefixCls + '-control-next kuma-button-secondary kuma-button'), onClick: this.handleScrollDown })
    );
  };

  FloatNav.prototype.render = function render() {
    var _this5 = this;

    var _props4 = this.props,
        prefixCls = _props4.prefixCls,
        className = _props4.className,
        width = _props4.width,
        height = _props4.height,
        offset = _props4.offset;
    var scrollTop = this.state.scrollTop;

    var renderProps = {
      className: (0, _classnames2["default"])(prefixCls, className),
      style: (0, _objectAssign2["default"])({
        width: width,
        height: height
      }, offset)
    };
    var contentStyle = {
      transform: 'translateY(-' + scrollTop + 'px)'
    };
    return _react2["default"].createElement(
      'div',
      renderProps,
      this.renderScrollBar(),
      _react2["default"].createElement(
        'div',
        {
          className: (0, _classnames2["default"])(prefixCls + '-container'),
          ref: function ref(node) {
            return _this5.containerEle = node;
          }
        },
        _react2["default"].createElement(
          'div',
          {
            className: (0, _classnames2["default"])(prefixCls + '-content'),
            ref: function ref(node) {
              return _this5.contentEle = node;
            },
            style: contentStyle
          },
          this.renderNavItems()
        )
      ),
      this.renderControl()
    );
  };

  return FloatNav;
}(_react.Component);

FloatNav.displayName = 'FloatNav';
FloatNav.defaultProps = {
  prefixCls: 'uxcore-float-nav',
  className: '',
  showOrderNumber: true,
  width: 260,
  height: 370,
  offset: {
    right: 20,
    bottom: 20
  },
  content: null,
  stepLength: 50
};
FloatNav.propTypes = {
  prefixCls: _propTypes2["default"].string,
  className: _propTypes2["default"].string,
  showOrderNumber: _propTypes2["default"].bool,
  width: _propTypes2["default"].number,
  height: _propTypes2["default"].number,
  offset: _propTypes2["default"].shape({
    right: _propTypes2["default"].number,
    bottom: _propTypes2["default"].number
  }),
  content: _propTypes2["default"].element,
  stepLength: _propTypes2["default"].number,
  children: _propTypes2["default"].any
};
exports["default"] = FloatNav;
module.exports = exports['default'];