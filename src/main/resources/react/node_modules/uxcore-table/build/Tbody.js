'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _addEventListener = require('rc-util/lib/Dom/addEventListener');

var _addEventListener2 = _interopRequireDefault(_addEventListener);

var _class = require('rc-util/lib/Dom/class');

var _uxcoreEmptyData = require('uxcore-empty-data');

var _uxcoreEmptyData2 = _interopRequireDefault(_uxcoreEmptyData);

var _uxcoreCollapse = require('uxcore-collapse');

var _uxcoreCollapse2 = _interopRequireDefault(_uxcoreCollapse);

var _Row = require('./Row');

var _Row2 = _interopRequireDefault(_Row);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _Footer = require('./Footer');

var _Footer2 = _interopRequireDefault(_Footer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by xy on 15/4/13.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Tbody = function (_React$Component) {
  _inherits(Tbody, _React$Component);

  function Tbody(props) {
    _classCallCheck(this, Tbody);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {};
    return _this;
  }

  Tbody.prototype.componentDidMount = function componentDidMount() {
    var me = this;
    me.rootEl = me.root;
    me.scrollHandler = me.onScroll.bind(me);
    me.scrollListener = (0, _addEventListener2["default"])(me.rootEl, 'scroll', me.scrollHandler);
    this.adjustMultilineFixedRowHeight();
    this.ieVer = _util2["default"].getIEVer();
  };

  Tbody.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var isFixedTable = ['fixed', 'rightFixed'].indexOf(this.props.fixedColumn) !== -1;
    if (isFixedTable && !(0, _isEqual2["default"])(prevProps.data, this.props.data)) {
      this.adjustMultilineFixedRowHeight();
    }
  };

  Tbody.prototype.componentWillUnmount = function componentWillUnmount() {
    var me = this;
    me.scrollListener.remove();
    me.removeScrollTimer();
    // if (this.scrollRafer) {
    //   raf.cancel(this.scrollRafer);
    //   this.scrollRafer = null;
    // }
  };

  Tbody.prototype.onScroll = function onScroll() {
    var me = this;
    var fixedColumn = me.props.fixedColumn;

    me.props.onScroll(me.rootEl.scrollLeft, me.rootEl.scrollTop, fixedColumn);
    // this.scrollRafer = requestAnimationFrame(() => {
    // });
    me.removeScrollTimer();
    me.scrollEndTimer = setTimeout(function () {
      me.props.onScroll(me.rootEl.scrollLeft, me.rootEl.scrollTop, fixedColumn);
    }, 50);
  };

  Tbody.prototype.getDom = function getDom() {
    return this.root;
  };

  Tbody.prototype.getRow = function getRow(index) {
    return this['row' + index];
  };

  Tbody.prototype.getRowGroupName = function getRowGroupName(name) {
    if (name === '__others__') {
      return _i18n2["default"][this.props.locale][name];
    }
    return name;
  };

  Tbody.prototype.removeScrollTimer = function removeScrollTimer() {
    var me = this;
    if (me.scrollEndTimer) {
      clearTimeout(me.scrollEndTimer);
      me.scrollEndTimer = null;
    }
  };

  Tbody.prototype.adjustRowsHeight = function adjustRowsHeight(index) {
    var mainBody = this.props.root.getMainBody();
    var mainTableRow = mainBody.getRow(index);
    if (mainTableRow) {
      var mainTableRowNode = mainTableRow.getDom();

      if ((0, _class.hasClass)(mainTableRowNode, 'multiline')) {
        var height = mainTableRowNode.clientHeight;
        var row = this.getRow(index);
        var rowNode = row.getInnerBox();
        rowNode.style.height = height + 'px';
      }
    }
  };

  Tbody.prototype.adjustMultilineFixedRowHeight = function adjustMultilineFixedRowHeight() {
    var _this2 = this;

    var isFixedTable = ['fixed', 'rightFixed'].indexOf(this.props.fixedColumn) !== -1;
    if (isFixedTable) {
      var mainBody = this.props.root.getMainBody();
      if (mainBody) {
        if (!this.props.rowGroupKey) {
          this.props.data.forEach(function (item, index) {
            _this2.adjustRowsHeight(index);
          });
        } else {
          this.rowGroupArr.forEach(function (rowGroupName, i) {
            _this2.rowGroupMap[rowGroupName].forEach(function (item, j) {
              var index = i + '-' + j;
              _this2.adjustRowsHeight(index);
            });
          });
        }
      }
    }
  };

  Tbody.prototype.saveRef = function saveRef(name) {
    var me = this;
    return function func(c) {
      me[name] = c;
    };
  };

  Tbody.prototype.renderEmptyData = function renderEmptyData() {
    if (this.props.data.length === 0 && !this.props.mask) {
      var style = {};
      if (typeof this.props.height === 'number') {
        style.lineHeight = this.props.height - 10 + 'px';
      }
      var defaultEmptyText = _react2["default"].createElement(
        'div',
        { style: { lineHeight: 2 } },
        _i18n2["default"][this.props.locale]['default-empty-text']
      );
      return _react2["default"].createElement(
        _uxcoreEmptyData2["default"],
        { style: { marginTop: '20px', marginBottom: '20px' } },
        this.props.emptyText || defaultEmptyText
      );
    }
    return null;
  };

  Tbody.prototype.renderRowGroupFooter = function renderRowGroupFooter(rowGroupData) {
    var _props = this.props,
        hasFooter = _props.hasFooter,
        showRowGroupFooter = _props.showRowGroupFooter,
        data = _props.data,
        columns = _props.columns,
        footer = _props.footer,
        fixedColumn = _props.fixedColumn;

    if (!hasFooter || !showRowGroupFooter) {
      return null;
    }
    var footerProps = {
      data: data,
      columns: columns,
      footer: footer,
      rowGroupData: rowGroupData,
      from: 'rowGroup',
      fixedColumn: fixedColumn
    };
    return _react2["default"].createElement(_Footer2["default"], footerProps);
  };

  Tbody.prototype.render = function render() {
    var _this3 = this;

    var me = this;
    var props = me.props;
    var data = props.data;
    var leftFixedType = ['checkboxSelector', 'radioSelector', 'treeIcon'];
    var style = {
      height: props.bodyHeight
    };
    var columns = (0, _cloneDeep2["default"])(props.columns);
    var width = 0;
    var bodyWrapClassName = void 0;

    var scrollBarWidth = _util2["default"].measureScrollbar();

    if (props.fixedColumn === 'fixed') {
      columns = props.columns.filter(function (item) {
        if (item.fixed && !item.hidden || leftFixedType.indexOf(item.type) !== -1) {
          width = parseInt(item.width, 10) + width;
          return true;
        }
        return false;
      });
      style = _extends({}, style, {
        // paddingBottom: `${scrollBarWidth}px`,
        // marginBottom: `-${scrollBarWidth}px`,
        height: props.bodyHeight === 'auto' ? props.bodyHeight : props.bodyHeight - scrollBarWidth + 'px'
      });

      bodyWrapClassName = 'kuma-uxtable-body-fixed';
    } else if (props.fixedColumn === 'rightFixed') {
      columns = props.columns.filter(function (item) {
        if (item.rightFixed && !item.hidden) {
          return true;
        }
        return false;
      });
      bodyWrapClassName = 'kuma-uxtable-body-right-fixed';
      style = _extends({}, style, {
        // paddingBottom: `${scrollBarWidth}px`,
        // marginBottom: `-${scrollBarWidth}px`,
        height: props.bodyHeight === 'auto' ? props.bodyHeight : props.bodyHeight - scrollBarWidth + 'px'
      });
    } else if (props.fixedColumn === 'scroll') {
      var leftFixedColumns = [];
      var normalColumns = [];
      var rightFixedColumns = [];
      props.columns.forEach(function (item) {
        if (!item.hidden) {
          if (item.fixed || leftFixedType.indexOf(item.type) !== -1) {
            leftFixedColumns.push(item);
          } else if (item.rightFixed) {
            rightFixedColumns.push(item);
          } else {
            normalColumns.push(item);
          }
        }
      });

      columns = leftFixedColumns.concat(normalColumns, rightFixedColumns);
      bodyWrapClassName = 'kuma-uxtable-body-scroll';
      if (props.hasFooter) {
        style = _extends({}, style, {
          marginBottom: '-' + scrollBarWidth + 'px',
          overflowX: 'scroll'
        });
      }
    } else {
      bodyWrapClassName = 'kuma-uxtable-body-no';
    }
    var rows = [];
    var commonProps = {
      columns: columns,
      data: data,
      root: props.root,
      locale: props.locale,
      subComp: props.subComp,
      actions: props.actions,
      mode: props.mode,
      renderModel: props.renderModel,
      fixedColumn: props.fixedColumn,
      level: 1,
      levels: props.levels,
      expandedKeys: props.expandedKeys,
      renderSubComp: props.renderSubComp,
      changeSelected: props.changeSelected,
      checkboxColumnKey: props.checkboxColumnKey,
      addRowClassName: props.addRowClassName,
      rowSelection: props.rowSelection,
      handleDataChange: props.handleDataChange,
      attachCellField: props.attachCellField,
      detachCellField: props.detachCellField,
      visible: true,
      bodyNode: this.root
    };
    if (!this.props.rowGroupKey) {
      rows = data.map(function (item, index) {
        var renderProps = _extends({}, commonProps, {
          index: index,
          rowIndex: item.jsxid, // tree mode, rowIndex need think more, so use jsxid
          rowData: item,
          isHover: props.currentHoverRow === index,
          key: 'row' + index,
          ref: function ref(c) {
            _this3['row' + index] = c;
          },
          last: index === data.length - 1
        });
        return _react2["default"].createElement(_Row2["default"], renderProps);
      });
    } else {
      this.rowGroupMap = {};
      this.rowGroupArr = [];
      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        var rowGroupName = item[this.props.rowGroupKey];
        if (!rowGroupName) {
          rowGroupName = '__others__';
        }
        if (typeof rowGroupName !== 'string') {
          console.error('Table: the corresponding data\'s type of rowGroupKey should be a string!');
          this.rowGroupMap = {};
          this.rowGroupArr = [];
          break;
        }
        if (!Object.prototype.hasOwnProperty.call(this.rowGroupMap, rowGroupName)) {
          this.rowGroupMap[rowGroupName] = [];
          this.rowGroupArr.push(rowGroupName);
        }
        this.rowGroupMap[rowGroupName].push(item);
      }
      rows = _react2["default"].createElement(
        _uxcoreCollapse2["default"],
        { activeKey: props.rowGroupActiveKey || '0', className: props.jsxprefixCls + '-collapse', onChange: function onChange(key, activeKey) {
            props.onCollapseChange(activeKey);
          } },
        this.rowGroupArr.map(function (rowGroupName, i) {
          return _react2["default"].createElement(
            _uxcoreCollapse2["default"].Panel,
            { header: _this3.getRowGroupName(rowGroupName), key: i },
            _this3.rowGroupMap[rowGroupName].map(function (item, j) {
              var index = i + '-' + j;
              var renderProps = _extends({}, commonProps, {
                index: index,
                rowIndex: item.jsxid, // tree mode, rowIndex need think more, so use jsxid
                rowData: item,
                isHover: props.currentHoverRow === index,
                key: 'row' + index,
                ref: function ref(c) {
                  _this3['row' + index] = c;
                },
                last: i === _this3.rowGroupArr.length - 1 && j === _this3.rowGroupMap[rowGroupName].length - 1
              });
              return _react2["default"].createElement(_Row2["default"], renderProps);
            }),
            _this3.renderRowGroupFooter(_this3.rowGroupMap[rowGroupName])
          );
        })
      );
    }
    return _react2["default"].createElement(
      'div',
      { className: bodyWrapClassName, ref: this.saveRef('root'), style: style },
      this.renderEmptyData(),
      data.length > 0 ? _react2["default"].createElement(
        'ul',
        { className: this.props.jsxprefixCls },
        rows
      ) : null
    );
  };

  return Tbody;
}(_react2["default"].Component);

Tbody.propTypes = {
  columns: _propTypes2["default"].any,
  jsxprefixCls: _propTypes2["default"].string,
  fixedColumn: _propTypes2["default"].string,
  locale: _propTypes2["default"].string,
  data: _propTypes2["default"].array,
  emptyText: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),
  height: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),
  mask: _propTypes2["default"].bool,
  onScroll: _propTypes2["default"].func,
  root: _propTypes2["default"].any,
  rowGroupKey: _propTypes2["default"].string,
  hasFooter: _propTypes2["default"].bool,
  showRowGroupFooter: _propTypes2["default"].bool,
  footer: _propTypes2["default"].func
};

Tbody.defaultProps = {
  jsxprefixCls: 'kuma-uxtable-body',
  onScroll: function onScroll() {}
};

exports["default"] = Tbody;
module.exports = exports['default'];