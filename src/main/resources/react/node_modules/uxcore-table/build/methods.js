'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function addEmptyRow(cb) {
  this.insertRecords({}, false, cb);
}

function addEmptyRowFromTop(cb) {
  this.insertRecords({}, true, cb);
}

function addRow(rowData, cb) {
  this.insertRecords(rowData, false, cb);
}

function addRowFromTop(rowData, cb) {
  this.insertRecords(rowData, true, cb);
}

function resetRow(rowData, cb) {
  var _this = this;

  var me = this;
  var updateData = {};
  var data = me.data.datas || me.data.data;
  for (var i = 0; i < data.length; i++) {
    if (data[i].jsxid === rowData.jsxid) {
      updateData = (0, _cloneDeep2["default"])(data[i]);
      break;
    }
  }
  updateData.__mode__ = _uxcoreConst2["default"].MODE.EDIT;
  this.updateRecord(updateData, function () {
    _this.doValidate();
    if (cb) {
      cb();
    }
  });
}

function resetAllRow(cb) {
  var _this2 = this;

  var me = this;
  var copyData = (0, _cloneDeep2["default"])(me.data);
  var stateData = me.state.data.data || me.state.data.datas;
  if (copyData.data || copyData.datas) {
    var data = copyData.data || copyData.datas;

    var _loop = function _loop(i) {
      var item = data[i];
      stateData.forEach(function (stateItem) {
        if (item.jsxid === stateItem.jsxid) {
          item.__mode__ = stateItem.__mode__;
        }
      });
    };

    for (var i = 0; i < data.length; i++) {
      _loop(i);
    }
    this.setState({
      data: copyData
    }, function () {
      _this2.doValidate();
      if (cb) {
        cb();
      }
    });
  }
}

function delRow(rowData, cb) {
  this.removeRecords(rowData, cb);
}

function editRow(rowData, cb) {
  var newRowData = (0, _cloneDeep2["default"])(rowData);
  newRowData.__mode__ = _uxcoreConst2["default"].MODE.EDIT;
  this.updateRecord(newRowData, cb);
}

function viewRow(rowData, cb) {
  var newRowData = (0, _cloneDeep2["default"])(rowData);
  newRowData.__mode__ = _uxcoreConst2["default"].MODE.VIEW;
  this.updateRecord(newRowData, cb);
}

function viewAllRow(cb) {
  var me = this;
  var data = (0, _cloneDeep2["default"])(me.state.data.data || me.state.data.datas);
  for (var i = 0; i < data.length; i++) {
    var _item = data[i];
    _item.__mode__ = _uxcoreConst2["default"].MODE.VIEW;
  }
  this.updateRecord(data, cb);
}

function resetAndViewAllRow(cb) {
  var me = this;
  var data = (0, _cloneDeep2["default"])(me.data.data || me.data.datas);
  for (var i = 0; i < data.length; i++) {
    var _item2 = data[i];
    _item2.__mode__ = _uxcoreConst2["default"].MODE.VIEW;
  }
  this.updateRecord(data, cb);
}

function saveRow(rowData, cb) {
  var newRowData = (0, _cloneDeep2["default"])(rowData);
  newRowData.__mode__ = _uxcoreConst2["default"].MODE.VIEW;
  newRowData.__edited__ = true;
  this.syncRecord(newRowData, cb);
}

function saveAllRow(cb) {
  var me = this;
  var data = (0, _cloneDeep2["default"])(me.state.data.data || me.state.data.datas);
  for (var i = 0; i < data.length; i++) {
    var _item3 = data[i];
    _item3.__mode__ = _uxcoreConst2["default"].MODE.VIEW;
    _item3.__edited__ = true;
  }
  this.syncRecord(data, cb);
}

function editAllRow(cb) {
  var me = this;
  var data = (0, _cloneDeep2["default"])(me.data.data || me.data.datas);
  for (var i = 0; i < data.length; i++) {
    var _item4 = data[i];
    _item4.__mode__ = _uxcoreConst2["default"].MODE.EDIT;
  }
  this.updateRecord(data, cb);
}

function toggleSubComp(rowData, cb) {
  var content = (0, _cloneDeep2["default"])(this.state.data);
  var data = content.data || content.datas;

  if (data) {
    for (var i = 0; i < data.length; i++) {
      var _item5 = data[i];
      if (_item5.jsxid === rowData.jsxid) {
        _item5.showSubComp = !_item5.showSubComp;
        break;
      }
    }
    // this.setState({
    //   data: content,
    // }, () => {
    //   if (cb) {
    //     cb();
    //   }
    // });
    this.syncRecord(data, cb);
  }
}

function moveRowUp(rowData, cb) {
  var content = (0, _cloneDeep2["default"])(this.state.data);
  var data = content.data || content.datas;
  if (data) {
    var treeIdArr = rowData.__treeId__.split('-');
    var rows = data;
    for (var i = 0; i < treeIdArr.length - 1; i++) {
      var rowIndex = treeIdArr[i];
      rows = rows[rowIndex].data;
    }
    var lastIndex = treeIdArr.pop();
    if (lastIndex > 0) {
      rows.splice(lastIndex, 1);
      // change treeId before setState;
      rows[lastIndex - 1].__treeId__ = treeIdArr.concat([lastIndex]).join('-');
      rows.splice(lastIndex - 1, 0, _extends({}, rowData, { __treeId__: treeIdArr.concat([lastIndex - 1]).join('-') }));
      this.data = content;
      this.setState({
        data: content
      }, function () {
        if (cb) {
          cb();
        }
      });
    }
  }
}

function moveRowDown(rowData, cb) {
  var content = (0, _cloneDeep2["default"])(this.state.data);
  var data = content.data || content.datas;
  if (data) {
    var treeIdArr = rowData.__treeId__.split('-').map(function (item) {
      return parseInt(item, 10);
    });
    var rows = data;
    for (var i = 0; i < treeIdArr.length - 1; i++) {
      var rowIndex = treeIdArr[i];
      rows = rows[rowIndex].data;
    }
    var lastIndex = treeIdArr.pop();
    if (lastIndex < rows.length - 1) {
      // change treeId before setState;
      rows[lastIndex + 1].__treeId__ = treeIdArr.concat([lastIndex]).join('-');
      rows.splice(lastIndex, 1);
      rows.splice(lastIndex + 1, 0, _extends({}, rowData, { __treeId__: treeIdArr.concat([lastIndex + 1]).join('-') }));
      this.data = content;
      this.setState({
        data: content
      }, function () {
        if (cb) {
          cb();
        }
      });
    }
  }
}

function doValidate() {
  var pass = true;
  var me = this;
  var fieldKeys = Object.keys(me.fields);
  fieldKeys.forEach(function (name) {
    var fieldPass = me.fields[name]();
    // if one field fails to pass, the table fails to pass
    if (pass) {
      pass = fieldPass;
    }
  });
  return pass;
}

function getData(validate) {
  var me = this;
  var pass = true;
  if (validate !== false) {
    pass = this.doValidate();
  }
  if (me.props.getSavedData) {
    // 滤除可能为空的元素
    var data = (0, _cloneDeep2["default"])(me.data);
    if (data && data.data instanceof Array) {
      data.data = data.data.filter(function (item) {
        return item !== undefined;
      });
    }
    return {
      data: data,
      pass: pass
    };
  }
  return {
    data: me.state.data,
    pass: pass
  };
}

function toggleTreeExpanded(rowData, cb) {
  var expandedKeys = (0, _cloneDeep2["default"])(this.state.expandedKeys);
  _util2["default"].toggleItemInArr(rowData.jsxid, expandedKeys);
  this.setState({
    expandedKeys: expandedKeys
  }, function () {
    if (cb) {
      cb();
    }
  });
}

exports["default"] = {
  addEmptyRow: addEmptyRow,
  addEmptyRowFromTop: addEmptyRowFromTop,
  addRow: addRow,
  addRowFromTop: addRowFromTop,
  resetRow: resetRow,
  resetAllRow: resetAllRow,
  delRow: delRow,
  editRow: editRow,
  editAllRow: editAllRow,
  viewRow: viewRow,
  viewAllRow: viewAllRow,
  resetAndViewAllRow: resetAndViewAllRow,
  saveRow: saveRow,
  saveAllRow: saveAllRow,
  toggleSubComp: toggleSubComp,
  toggleTreeExpanded: toggleTreeExpanded,
  doValidate: doValidate,
  getData: getData,
  moveRowUp: moveRowUp,
  moveRowDown: moveRowDown
};
module.exports = exports['default'];