'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _uxcoreTree = require('uxcore-tree');

var _uxcoreTree2 = _interopRequireDefault(_uxcoreTree);

var _uxcorePopover = require('uxcore-popover');

var _uxcorePopover2 = _interopRequireDefault(_uxcorePopover);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _i18n = require('../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var TreeNode = _uxcoreTree2["default"].TreeNode;

var ColumnPicker = function (_React$Component) {
  _inherits(ColumnPicker, _React$Component);

  function ColumnPicker(props) {
    _classCallCheck(this, ColumnPicker);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      visible: false
    };
    return _this;
  }

  ColumnPicker.prototype.componentDidUpdate = function componentDidUpdate() {
    var me = this;
    if (me.state.visible) {
      var dropDownDOMNode = me.getDropDownDOMNOde();
      var commonTreeDOMNode = me.commonTree.refs.tree;
      var width = commonTreeDOMNode.offsetWidth + 41;
      for (var i = 0; i < me.groupNum; i++) {
        width += me['groupTree-' + i].refs.tree.offsetWidth;
      }
      var maxWidth = typeof me.props.dropdownMaxWidth === 'number' ? me.props.dropdownMaxWidth : 1000;
      dropDownDOMNode.style.width = (width <= maxWidth ? width : maxWidth) + 'px';
    }
  };

  ColumnPicker.prototype.getDropDownDOMNOde = function getDropDownDOMNOde() {
    return this.dropDownDOMNode;
  };

  ColumnPicker.prototype.handlePickerSelect = function handlePickerSelect(groupName, selectedKeys) {
    this.props.handleColumnPickerChange(selectedKeys, groupName);
  };

  ColumnPicker.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
      return false;
    };
  };

  ColumnPicker.prototype.renderTree = function renderTree() {
    var me = this;
    var columns = me.props.columns;

    var notRenderColumns = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];
    notRenderColumns.push(me.props.checkboxColumnKey);
    var options = [];
    var groupTree = [];
    var selectedKeys = (0, _util.getSelectedKeys)(columns);
    me.groupNum = 0;
    columns.forEach(function (item) {
      // the column is not the notRender one and is not the group.
      var isGroup = {}.hasOwnProperty.call(item, 'columns') && _typeof(item.columns) === 'object';
      if (isGroup) {
        me.hasGroup = true;
      }
      if (notRenderColumns.indexOf(item.dataKey) === -1 && !isGroup) {
        if (item.dataKey && item.type !== 'action') {
          options.push(_react2["default"].createElement(TreeNode, {
            key: item.dataKey,
            title: typeof item.title === 'function' ? item.title() : item.title
          }));
        }
      } else if (isGroup) {
        groupTree.push(me.renderGroupTree(item, me.groupNum));
        me.groupNum += 1;
      }
    });

    var commonGroupName = (0, _util.getConsts)().commonGroup;
    var commonTree = _react2["default"].createElement(
      _uxcoreTree2["default"],
      {
        checkable: true,
        multiple: true,
        selectable: false,
        className: !me.hasGroup ? 'no-group' : '',
        ref: me.saveRef('commonTree'),
        checkedKeys: selectedKeys,
        onCheck: me.handlePickerSelect.bind(me, commonGroupName)
      },
      options
    );

    if (!me.hasGroup) {
      return commonTree;
    }

    return _react2["default"].createElement(
      'div',
      null,
      groupTree,
      commonTree
    );
  };

  ColumnPicker.prototype.renderGroupTree = function renderGroupTree(group, index) {
    var me = this;
    var options = (group.columns || []).map(function (item) {
      return _react2["default"].createElement(TreeNode, {
        key: item.dataKey,
        title: typeof item.title === 'function' ? item.title() : item.title
      });
    });

    var selectedKeys = (0, _util.getSelectedKeys)(group.columns);

    return _react2["default"].createElement(
      _uxcoreTree2["default"],
      {
        key: group.group,
        ref: this.saveRef('groupTree-' + index),
        checkable: true,
        multiple: true,
        selectable: false,
        defaultExpandAll: true,
        checkedKeys: selectedKeys,
        onCheck: me.handlePickerSelect.bind(me, group.group)
      },
      _react2["default"].createElement(
        TreeNode,
        { title: group.group, key: group.group },
        options
      )
    );
  };

  ColumnPicker.prototype.render = function render() {
    var _classnames;

    var me = this;
    var _me$props = me.props,
        prefixCls = _me$props.prefixCls,
        locale = _me$props.locale;

    return _react2["default"].createElement(
      _uxcorePopover2["default"],
      {
        placement: 'bottomRight',
        trigger: 'click',
        overlay: me.renderTree(),
        overlayClassName: prefixCls + '-popover',
        align: {
          offset: [0, -10]
        }
      },
      _react2["default"].createElement(
        'div',
        { className: prefixCls },
        _react2["default"].createElement(
          'div',
          {
            className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, prefixCls + '-trigger', true), _defineProperty(_classnames, prefixCls + '-trigger__dropdown-visible', !!me.state.visible), _classnames))
          },
          _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'zidingyilie', className: prefixCls + '-icon' }),
          _react2["default"].createElement(
            'span',
            { className: prefixCls + '-title' },
            _i18n2["default"][locale]['templated-column']
          )
        )
      )
    );
  };

  return ColumnPicker;
}(_react2["default"].Component);

ColumnPicker.defaultProps = {
  prefixCls: 'kuma-uxtable-column-picker',
  locale: 'zh-cn',
  columns: []
};
ColumnPicker.propTypes = {
  prefixCls: _propTypes2["default"].string,
  locale: _propTypes2["default"].string,
  columns: _propTypes2["default"].array,
  handleColumnPickerChange: _propTypes2["default"].func
};

ColumnPicker.displayName = 'ColumnPicker';

exports["default"] = ColumnPicker;
module.exports = exports['default'];