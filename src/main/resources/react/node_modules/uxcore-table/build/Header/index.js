'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _classnames3 = require('classnames');

var _classnames4 = _interopRequireDefault(_classnames3);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _addEventListener = require('rc-util/lib/Dom/addEventListener');

var _addEventListener2 = _interopRequireDefault(_addEventListener);

var _CheckBox = require('../Cell/CheckBox');

var _CheckBox2 = _interopRequireDefault(_CheckBox);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _MessageIcon = require('./MessageIcon');

var _MessageIcon2 = _interopRequireDefault(_MessageIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by xy on 15/4/13.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Header = function (_React$Component) {
  _inherits(Header, _React$Component);

  function Header(props) {
    _classCallCheck(this, Header);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      pickerDisplay: false
    };
    return _this;
  }

  Header.prototype.componentDidMount = function componentDidMount() {
    var me = this;
    var fixedColumn = me.props.fixedColumn;

    if (fixedColumn === 'scroll') {
      me.rootEl = me.root;
      me.scrollHandler = me.onScroll.bind(me);
      me.scrollListener = (0, _addEventListener2["default"])(me.rootEl, 'scroll', me.scrollHandler);
    }
  };

  Header.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.scrollListener) {
      this.scrollListener.remove();
    }
  };

  Header.prototype.onScroll = function onScroll() {
    var me = this;
    var fixedColumn = me.props.fixedColumn;

    if (me.scrollEndTimer) {
      clearTimeout(me.scrollEndTimer);
    }
    me.scrollEndTimer = setTimeout(function () {
      me.props.onScroll(me.rootEl.scrollLeft, me.rootEl.scrollTop, fixedColumn);
    }, 500);
    me.props.onScroll(me.rootEl.scrollLeft, me.rootEl.scrollTop, fixedColumn);
  };

  Header.prototype.getDom = function getDom() {
    return this.root;
  };

  Header.prototype.getScroller = function getScroller() {
    return this.scroller;
  };

  Header.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
    };
  };

  Header.prototype.handleColumnOrder = function handleColumnOrder(column) {
    var me = this;
    var _me$props = me.props,
        orderColumnCB = _me$props.orderColumnCB,
        activeColumn = _me$props.activeColumn,
        orderType = _me$props.orderType;

    var type = 'desc';
    var typeMap = {
      desc: 'asc',
      asc: 'none',
      none: 'desc'
    };
    if (activeColumn && column.dataKey === activeColumn.dataKey && orderType) {
      type = typeMap[orderType];
    }
    if (orderColumnCB) {
      orderColumnCB(type, column);
    }
  };

  Header.prototype.handleCheckBoxChange = function handleCheckBoxChange(e) {
    var v = e.target.checked;
    this.props.selectAll.apply(null, [v]);
  };

  Header.prototype.renderOrderIcon = function renderOrderIcon(column) {
    var me = this;
    var _me$props2 = me.props,
        orderType = _me$props2.orderType,
        activeColumn = _me$props2.activeColumn;

    if (column.ordered) {
      var _classnames, _classnames2;

      var desc = 'triangle-down';
      var asc = 'triangle-up';
      var isActive = activeColumn && activeColumn.dataKey === column.dataKey;
      return _react2["default"].createElement(
        'span',
        { className: 'kuma-uxtable-h-sort', onClick: me.handleColumnOrder.bind(me, column) },
        _react2["default"].createElement('i', {
          className: (0, _classnames4["default"])((_classnames = {}, _defineProperty(_classnames, 'kuma-icon kuma-icon-' + asc, true), _defineProperty(_classnames, 'active', isActive && orderType === 'asc'), _classnames))
        }),
        _react2["default"].createElement('i', {
          className: (0, _classnames4["default"])((_classnames2 = {}, _defineProperty(_classnames2, 'kuma-icon kuma-icon-' + desc, true), _defineProperty(_classnames2, 'active', isActive && orderType === 'desc'), _classnames2))
        })
      );
    }
    return null;
  };

  Header.prototype.renderRequired = function renderRequired(item) {
    var prefixCls = this.props.prefixCls;

    if (item.required) {
      return _react2["default"].createElement(
        'span',
        { className: prefixCls + '-item-required' },
        '* '
      );
    }
    return null;
  };

  Header.prototype.renderColumn = function renderColumn(item, index, hasGroup, last) {
    var me = this;
    var _me$props3 = me.props,
        renderModel = _me$props3.renderModel,
        prefixCls = _me$props3.prefixCls;

    var rowSelectorInTreeMode = ['checkboxSelector', 'radioSelector'].indexOf(item.type) !== -1 && renderModel === 'tree';
    if (item.hidden || rowSelectorInTreeMode) {
      me.firstIndex = index + 1;
      return null;
    }
    var noBorderColumn = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];
    var style = {
      width: item.width ? item.width : '100px',
      textAlign: item.align ? item.align : 'left'
    };
    var v = void 0;
    if (hasGroup) {
      (0, _objectAssign2["default"])(style, {
        height: '100px',
        lineHeight: '100px'
      });
    }

    if (item.type === 'checkbox' || item.type === 'checkboxSelector') {
      (0, _objectAssign2["default"])(style, {
        paddingRight: '4px',
        paddingLeft: '12px',
        width: item.width ? item.width : '32px'
      });

      var checkBoxProps = {
        ref: me.saveRef('checkbox'),
        checked: me.props.checkStatus.isAllChecked,
        halfChecked: me.props.checkStatus.isHalfChecked,
        disable: me.props.checkStatus.isAllDisabled,
        onChange: me.handleCheckBoxChange.bind(me)
      };

      v = _react2["default"].createElement(_CheckBox2["default"], checkBoxProps);
    } else {
      var content = typeof item.title === 'function' ? item.title() : item.title;
      var title = typeof item.title === 'function' ? undefined : item.title;
      v = _react2["default"].createElement(
        'span',
        { title: title },
        content
      );
    }

    if (noBorderColumn.indexOf(item.dataKey) !== -1 || last) {
      (0, _objectAssign2["default"])(style, {
        borderRight: 'none'
      });
    }

    return _react2["default"].createElement(
      'div',
      {
        key: index,
        className: (0, _classnames4["default"])({
          'kuma-uxtable-cell': true,
          'show-border': me.props.showHeaderBorder,
          'kuma-uxtable-cell__action-collapsed': item.type === 'action' && item.collapseNum === 1
        }),
        style: style
      },
      me.renderIndent(index),
      me.renderRequired(item),
      v,
      _react2["default"].createElement(_MessageIcon2["default"], { message: item.message, prefixCls: prefixCls + '-msg' }),
      me.renderOrderIcon(item)
    );
  };

  Header.prototype.renderIndent = function renderIndent(index) {
    if (this.firstIndex !== index) {
      return null;
    }
    var me = this;
    var _me$props4 = me.props,
        renderModel = _me$props4.renderModel,
        checkboxColumnKey = _me$props4.checkboxColumnKey;

    if (renderModel === 'tree') {
      return _react2["default"].createElement('span', {
        className: (0, _classnames4["default"])({
          indent: true,
          hasCheck: checkboxColumnKey
        })
      });
      // return (
      //   <CheckBox className="kuma-uxtable-header-tree-selector" />
      // );
    }
    return null;
  };

  Header.prototype.renderColumns = function renderColumns(_columns) {
    var me = this;
    var columns = _columns.map(function (item, index) {
      var last = index === _columns.length - 1;
      if ({}.hasOwnProperty.call(item, 'columns') && _typeof(item.columns) === 'object') {
        // First determine whether the group should be rendered, if all columns
        // is hidden, the column group should not be rendered.
        var shouldRenderGroup = item.columns.some(function (column) {
          return !column.hidden;
        });
        if (shouldRenderGroup) {
          return _react2["default"].createElement(
            'div',
            {
              className: 'kuma-uxtable-header-column-group',
              key: index
            },
            _react2["default"].createElement(
              'div',
              {
                className: (0, _classnames4["default"])('kuma-uxtable-header-group-name', {
                  last: last
                })
              },
              item.group
            ),
            item.columns.map(function (column, i) {
              var shouldHideBorderRight = i === item.columns.length - 1 && last && me.props.fixedColumn !== 'fixed';
              return me.renderColumn(column, i, false, shouldHideBorderRight);
            })
          );
        }
        return null;
      }
      return me.renderColumn(item, index, me.hasGroup, last);
    });
    return columns;
  };

  Header.prototype.render = function render() {
    var _this2 = this;

    var props = this.props;
    var me = this;
    var headerStyle = {};
    var leftFixedType = ['checkboxSelector', 'radioSelector', 'treeIcon'];
    var scrollBarWidth = _util2["default"].measureScrollbar();
    var width = 0;
    var headerWrapClassName = void 0;
    var columns = void 0;

    if (props.fixedColumn === 'fixed') {
      columns = props.columns.filter(function (item) {
        if (item.fixed && !item.hidden || leftFixedType.indexOf(item.type) !== -1) {
          width = parseInt(item.width, 10) + width;
          return true;
        }
        return false;
      });
      headerWrapClassName = 'kuma-uxtable-header-fixed';
    } else if (props.fixedColumn === 'rightFixed') {
      columns = props.columns.filter(function (item) {
        if (item.rightFixed && !item.hidden) {
          width = parseInt(item.width, 10) + width;
          return true;
        }
        return false;
      });
      headerWrapClassName = 'kuma-uxtable-header-right-fixed';
    } else if (props.fixedColumn === 'scroll') {
      var leftFixedColumns = [];
      var normalColumns = [];
      var rightFixedColumns = [];
      props.columns.forEach(function (item) {
        if (!item.hidden) {
          if (item.fixed || leftFixedType.indexOf(item.type) !== -1) {
            leftFixedColumns.push(item);
          } else if (item.rightFixed) {
            rightFixedColumns.push(item);
          } else {
            normalColumns.push(item);
          }
        }
      });

      columns = leftFixedColumns.concat(normalColumns, rightFixedColumns);

      (0, _objectAssign2["default"])(headerStyle, {
        marginBottom: '-' + scrollBarWidth + 'px',
        overflowX: scrollBarWidth ? 'scroll' : 'hidden'
        // width: typeof props.width === 'number' ? props.width - 3 : props.width,
        // minWidth: typeof props.width === 'number' ? props.width - 3 : props.width,
      });
      headerWrapClassName = 'kuma-uxtable-header-scroll';
    } else {
      columns = props.columns;
      headerWrapClassName = 'kuma-uxtable-header-no';
    }
    me.hasGroup = false;
    for (var i = 0; i < columns.length; i++) {
      if ('group' in columns[i]) {
        me.hasGroup = true;
        break;
      }
    }
    return _react2["default"].createElement(
      'div',
      { className: headerWrapClassName, style: headerStyle, ref: me.saveRef('root') },
      _react2["default"].createElement(
        'div',
        { className: props.prefixCls, ref: function ref(c) {
            _this2.scroller = c;
          } },
        me.renderColumns(columns)
      )
    );
  };

  return Header;
}(_react2["default"].Component);

Header.propTypes = {
  handleColumnPickerChange: _propTypes2["default"].func,
  selectAll: _propTypes2["default"].func,
  prefixCls: _propTypes2["default"].string
};

Header.defaultProps = {
  prefixCls: 'kuma-uxtable-header'
};

exports["default"] = Header;
module.exports = exports['default'];