'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keycode = require('../utils/keycode');

var __matchTimer = void 0;

exports["default"] = {
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (prevState.mentionList.length !== this.state.mentionList.length) {
      this.setState({
        panelVisible: this.state.mentionList.length > 0
      });
    }
    if (!prevState.panelVisible && this.state.panelVisible) {
      this.setState({
        panelIdx: 0
      });
    }
  },
  onPanelKeyup: function onPanelKeyup(e) {
    var _state = this.state,
        panelVisible = _state.panelVisible,
        panelIdx = _state.panelIdx,
        mentionList = _state.mentionList;

    if (panelVisible) {
      var count = mentionList.length;
      switch (e.keyCode) {
        case _keycode.KEYCODE.UP:
          this.setState({
            panelIdx: panelIdx === 0 ? count - 1 : panelIdx - 1
          });
          break;
        case _keycode.KEYCODE.DOWN:
          this.setState({
            panelIdx: panelIdx === count - 1 ? 0 : panelIdx + 1
          });
          break;
        case _keycode.KEYCODE.ENTER:
          this.selectItem(mentionList[panelIdx]);
          break;
        default:
          this.setState({
            mentionList: []
          });
          break;
      }
    }
  },
  runMatcher: function runMatcher(str) {
    var _this = this;

    if (__matchTimer) {
      clearTimeout(__matchTimer);
    }
    __matchTimer = setTimeout(function () {
      _this._matcher(str);
    }, this.props.delay);
  },
  _matcher: function _matcher(str) {
    var _props = this.props,
        source = _props.source,
        matchRange = _props.matchRange;

    this.setState({
      panelVisible: false,
      mentionList: []
    });
    if (str.length >= matchRange[0] && str.length <= matchRange[1]) {
      if (Array.isArray(source)) {
        this.next(source.filter(function (item) {
          return item.indexOf(str) !== -1;
        }));
      } else {
        source(str, this.next.bind(this));
      }
    }
  },
  next: function next(matchResult) {
    var result = matchResult;
    if (this.props.formatter) {
      result = this.props.formatter(result);
    }
    this.setState({
      mentionList: result
    });
  }
};
module.exports = exports['default'];