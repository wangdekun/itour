'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var React = require('react');

var SuperComponent = function (_React$Component) {
  _inherits(SuperComponent, _React$Component);

  function SuperComponent() {
    _classCallCheck(this, SuperComponent);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  SuperComponent.prototype.prefixCls = function prefixCls(name) {
    var prefixCls = this.props.prefixCls;

    return name.split(/\s/).map(function (i) {
      return prefixCls + '-' + i;
    }).join(' ');
  };

  return SuperComponent;
}(React.Component);

SuperComponent.propTypes = {
  prefixCls: React.PropTypes.string
};

exports["default"] = SuperComponent;
module.exports = exports['default'];