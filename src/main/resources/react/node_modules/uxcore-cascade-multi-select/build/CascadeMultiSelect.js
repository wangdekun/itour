'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames4 = require('classnames');

var _classnames5 = _interopRequireDefault(_classnames4);

var _uxcoreDropdown = require('uxcore-dropdown');

var _uxcoreDropdown2 = _interopRequireDefault(_uxcoreDropdown);

var _uxcoreButton = require('uxcore-button');

var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

var _CascadeMultiPanel = require('./CascadeMultiPanel');

var _CascadeMultiPanel2 = _interopRequireDefault(_CascadeMultiPanel);

var _CascadeMultiModal = require('./CascadeMultiModal');

var _CascadeMultiModal2 = _interopRequireDefault(_CascadeMultiModal);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * CascadeMultiSelect Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author changming<changming.zy@alibaba-inc.com>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2017, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var makeOptionsChecked = function makeOptionsChecked() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var options = arguments[1];

  // 没有value则需要设置check为false
  var valueStr = value.map(function (i) {
    return '' + i;
  });
  for (var i = 0, l = options.length; i < l; i++) {
    var item = options[i];
    var containIdx = valueStr.indexOf('' + item.value);
    if (containIdx > -1) {
      item.checked = true;
      valueStr.splice(containIdx, 1);
    } else {
      item.checked = false;
    }
    if (item.children && item.children.length) {
      makeOptionsChecked(valueStr, item.children);
    }
  }
};

var CascadeMultiSelect = function (_React$Component) {
  _inherits(CascadeMultiSelect, _React$Component);

  function CascadeMultiSelect(props) {
    _classCallCheck(this, CascadeMultiSelect);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      value: props.value,
      defaultValue: props.defaultValue,
      displayValue: '',
      allowClear: props.allowClear,
      disabled: props.disabled,
      showSubMenu: false,
      result: {}
    };
    _this.separator = ' , ';
    _this.data = {
      value: props.value || props.defaultValue,
      options: props.options,
      displayValue: '',
      result: {}
    };
    _this.hasChanged = false;
    return _this;
  }

  CascadeMultiSelect.prototype.componentWillMount = function componentWillMount() {
    this.onOk = this.onOk.bind(this);
    this.handleSelect = this.handleSelect.bind(this);
    this.handleItemClick = this.handleItemClick.bind(this);
    this.handleStopPropagation = this.handleStopPropagation.bind(this);
  };

  CascadeMultiSelect.prototype.componentDidMount = function componentDidMount() {
    var _props = this.props,
        value = _props.value,
        defaultValue = _props.defaultValue,
        options = _props.options;

    var displayValue = this.getInputValue(value, options);
    this.data.displayValue = displayValue;
    this.data.value = value;
    this.setInputValue(value || defaultValue, options);
  };

  CascadeMultiSelect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    // bugfix: 当 props.value 首先传递进组件之后再传递 options 数据并没有回填
    var value = nextProps.value,
        options = nextProps.options;

    var displayValue = this.getInputValue(value, options);
    this.data.displayValue = displayValue;
    this.data.value = value;
    this.setInputValue(value, options);
  };

  CascadeMultiSelect.prototype.onOk = function onOk() {
    var _this2 = this;

    if (!this.hasChanged) {
      return;
    }
    var _state = this.state,
        value = _state.value,
        result = _state.result;

    var displayValue = this.getInputValue(value, this.props.options);
    var valueList = result.valueList,
        labelList = result.labelList,
        leafList = result.leafList,
        cascadeSelected = result.cascadeSelected;

    this.data.displayValue = displayValue;
    this.data.value = value;
    this.data.result = result;
    this.setState({
      displayValue: displayValue,
      value: value
    }, function () {
      _this2.props.onOk(valueList, labelList, leafList, cascadeSelected);
    });
  };

  CascadeMultiSelect.prototype.onCancel = function onCancel() {
    var _this3 = this;

    var _data = this.data,
        value = _data.value,
        options = _data.options,
        result = _data.result;

    this.setState({
      displayValue: this.getInputValue(value, options),
      value: value,
      result: result
    }, function () {
      _this3.props.onCancel();
    });
  };

  CascadeMultiSelect.prototype.onCleanSelect = function onCleanSelect() {
    var _this4 = this;

    var _props2 = this.props,
        isCleanDisabledLabel = _props2.isCleanDisabledLabel,
        options = _props2.options;

    var prevValue = this.state.value;
    var displayValue = '';
    var value = [];
    var labelList = [];
    var leafList = [];
    var result = {};
    if (!isCleanDisabledLabel) {
      var data = (0, _utils.getDisabledValueLabel)(options, prevValue);
      leafList = data.leafNodes;
      data.disabledNodes.forEach(function (item) {
        value.push(item.value);
        labelList.push(item.label);
      });
      result.labelList = labelList;
      result.valueList = value;
      result.leafList = leafList;
      displayValue = this.getInputValue(value, options);
    }
    this.data.displayValue = displayValue;
    this.data.value = value;
    this.setState({
      value: value,
      displayValue: displayValue,
      result: result
    }, function () {
      _this4.props.onOk(value, labelList, leafList);
      _this4.props.onSelect(value, labelList, leafList);
    });
    this.hasChanged = true;
  };

  CascadeMultiSelect.prototype.onDropDownVisibleChange = function onDropDownVisibleChange(visible) {
    var disabled = this.props.disabled;

    if (!disabled) {
      this.setState({ showSubMenu: visible });
    }
    if (!visible) {
      this.onCancel();
    }
  };

  CascadeMultiSelect.prototype.getInputValue = function getInputValue(value, dataList) {
    if (this.props.beforeRender) {
      makeOptionsChecked(value, dataList);
      return this.props.beforeRender(value, dataList);
    }

    var arr = [];
    if (value && value.length) {
      for (var i = 0; i < value.length; i += 1) {
        arr.push(this.getValueLabel(dataList, value[i]));
      }
    }
    return arr.join(this.separator);
  };

  CascadeMultiSelect.prototype.getValueLabel = function getValueLabel(dataList, key) {
    var back = '';
    if (dataList && dataList.length) {
      for (var i = 0; i < dataList.length; i += 1) {
        if (dataList[i].value === key) {
          return dataList[i].children && dataList[i].children.length ? dataList[i].label + ' (' + (0, _locale2["default"])(this.props.locale).all + ')' : dataList[i].label;
        }
        if (dataList[i].children) {
          var res = this.getValueLabel(dataList[i].children, key);
          back = res || back;
        }
      }
    }
    return back;
  };

  CascadeMultiSelect.prototype.setInputValue = function setInputValue(value, dataList) {
    var displayValue = this.getInputValue(value, dataList);
    this.setState({ displayValue: displayValue, value: value });
  };

  CascadeMultiSelect.prototype.setPanelWidth = function setPanelWidth() {
    var cascadeSize = this.props.cascadeSize;

    var style = {};
    var width = (0, _utils.getWidthStyle)(this.refUls, 150);
    var resultPanelWidth = (0, _utils.getWidthStyle)(this.refResultPanel, 220);
    style.width = 0;
    for (var i = 0; i < cascadeSize; i += 1) {
      style.width += parseInt(width, 0);
    }
    style.width += parseInt(resultPanelWidth, 0) + 2;
    this.resultPanelWidth = parseInt(resultPanelWidth, 0);
    return style;
  };

  CascadeMultiSelect.prototype.handleSelect = function handleSelect(valueList, labelList, leafList, cascadeSelected) {
    var _this5 = this;

    var options = this.props.options;

    this.setState({
      displayValue: this.getInputValue(valueList, options),
      value: valueList,
      result: {
        valueList: valueList,
        labelList: labelList,
        leafList: leafList,
        cascadeSelected: cascadeSelected
      }
    }, function () {
      _this5.props.onSelect(valueList, labelList, leafList, cascadeSelected);
    });
    this.hasChanged = true;
  };

  CascadeMultiSelect.prototype.handleItemClick = function handleItemClick() {
    var _props3;

    (_props3 = this.props).onItemClick.apply(_props3, arguments);
  };

  CascadeMultiSelect.prototype.handleStopPropagation = function handleStopPropagation(e) {
    var tagName = e.target.tagName;
    if (tagName === 'DIV') {
      e.stopPropagation();
    }
  };

  CascadeMultiSelect.prototype.renderInput = function renderInput() {
    var _classnames;

    var _props4 = this.props,
        prefixCls = _props4.prefixCls,
        placeholder = _props4.placeholder,
        locale = _props4.locale,
        readOnly = _props4.readOnly;
    var disabled = this.state.disabled;
    var displayValue = this.data.displayValue;

    if (readOnly) {
      return _react2["default"].createElement(
        'span',
        null,
        displayValue
      );
    }
    return _react2["default"].createElement(
      'div',
      null,
      !displayValue.length ? _react2["default"].createElement(
        'div',
        { className: 'kuma-cascader-placeholder' },
        placeholder || (0, _locale2["default"])(locale).placeholder
      ) : _react2["default"].createElement(
        'div',
        { className: (0, _classnames5["default"])([prefixCls + '-text-result']) },
        _react2["default"].createElement('input', {
          className: (0, _classnames5["default"])((_classnames = {}, _defineProperty(_classnames, prefixCls + '-text-result-input', true), _defineProperty(_classnames, prefixCls + '-text-result-input-disabled', disabled), _classnames)),
          value: displayValue,
          onChange: function onChange() {}
        })
      )
    );
  };

  CascadeMultiSelect.prototype.renderCloseIcon = function renderCloseIcon() {
    var _this6 = this;

    var disabled = this.state.disabled;

    if (disabled) {
      return null;
    }
    return _react2["default"].createElement(
      'div',
      { className: 'kuma-cascader-close-wrap' },
      _react2["default"].createElement('i', {
        className: 'kuma-icon kuma-icon-error',
        onClick: function onClick(e) {
          _this6.onCleanSelect();
          e.preventDefault();
          e.stopPropagation();
        }
      })
    );
  };

  CascadeMultiSelect.prototype.renderContent = function renderContent() {
    var _classnames2, _classnames3;

    var _props5 = this.props,
        className = _props5.className,
        prefixCls = _props5.prefixCls;
    var _state2 = this.state,
        displayValue = _state2.displayValue,
        allowClear = _state2.allowClear,
        disabled = _state2.disabled,
        showSubMenu = _state2.showSubMenu;

    var prefixCls2 = 'kuma-cascader';
    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames5["default"])((_classnames2 = {}, _defineProperty(_classnames2, className, true), _defineProperty(_classnames2, prefixCls + '-input', !disabled), _defineProperty(_classnames2, prefixCls2 + '-wrapper', true), _defineProperty(_classnames2, prefixCls2 + '-disabled', disabled), _defineProperty(_classnames2, prefixCls2 + '-clearable', !disabled && allowClear && displayValue.length > 0), _classnames2))
      },
      _react2["default"].createElement(
        'div',
        { className: prefixCls2 + '-text' },
        _react2["default"].createElement(
          'div',
          { className: prefixCls2 + '-trigger' },
          this.renderInput()
        )
      ),
      _react2["default"].createElement(
        'div',
        {
          className: (0, _classnames5["default"])((_classnames3 = {}, _defineProperty(_classnames3, prefixCls2 + '-arrow', true), _defineProperty(_classnames3, prefixCls2 + '-arrow-reverse', showSubMenu), _classnames3))
        },
        _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-triangle-down' })
      ),
      this.renderCloseIcon()
    );
  };

  CascadeMultiSelect.prototype.renderCascadeMultiPanel = function renderCascadeMultiPanel() {
    var _this7 = this;

    var _props6 = this.props,
        dropdownClassName = _props6.dropdownClassName,
        prefixCls = _props6.prefixCls;
    var value = this.state.value;

    return _react2["default"].createElement(
      'div',
      { className: (0, _classnames5["default"])(prefixCls + '-select-panel-content') },
      _react2["default"].createElement(
        'div',
        { className: prefixCls + '-select-panel-wrap' },
        _react2["default"].createElement(_CascadeMultiPanel2["default"], _extends({}, this.props, {
          className: dropdownClassName,
          value: value,
          ref: function ref(r) {
            _this7.CascadeMulti = r;
          },
          onSelect: this.handleSelect,
          onItemClick: this.handleItemClick,
          mode: 'mix'
        })),
        this.renderFooter()
      )
    );
  };

  CascadeMultiSelect.prototype.renderFooter = function renderFooter() {
    var _props7 = this.props,
        prefixCls = _props7.prefixCls,
        locale = _props7.locale;

    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames5["default"])(prefixCls + '-select-footer'),
        style: this.setPanelWidth(),
        onClick: this.handleStopPropagation
      },
      _react2["default"].createElement(
        _uxcoreButton2["default"],
        {
          onClick: this.onOk
        },
        (0, _locale2["default"])(locale).ok
      )
    );
  };

  CascadeMultiSelect.prototype.render = function render() {
    var _this8 = this;

    var _props8 = this.props,
        disabled = _props8.disabled,
        getPopupContainer = _props8.getPopupContainer,
        readOnly = _props8.readOnly;

    if (readOnly) {
      return this.renderInput();
    }
    if (disabled) {
      return this.renderContent();
    }
    var CascadeMultiComponent = this.renderCascadeMultiPanel();
    return _react2["default"].createElement(
      _uxcoreDropdown2["default"],
      {
        overlay: CascadeMultiComponent,
        trigger: ['click'],
        minOverlayWidthMatchTrigger: false,
        onVisibleChange: function onVisibleChange(visible) {
          _this8.onDropDownVisibleChange(visible);
        },
        getPopupContainer: getPopupContainer
      },
      this.renderContent()
    );
  };

  return CascadeMultiSelect;
}(_react2["default"].Component);

CascadeMultiSelect.defaultProps = {
  className: '',
  prefixCls: 'kuma-cascade-multi',
  config: [],
  options: [],
  cascadeSize: 3,
  value: [],
  notFoundContent: '',
  allowClear: true,
  locale: 'zh-cn',
  onSelect: function onSelect() {},
  onItemClick: function onItemClick() {},

  placeholder: '',
  disabled: false,
  defaultValue: [],
  dropdownClassName: '',
  onOk: function onOk() {},
  onCancel: function onCancel() {},
  getPopupContainer: null,

  beforeRender: null,
  readOnly: false,
  keyCouldDuplicated: false,
  isCleanDisabledLabel: false
};

CascadeMultiSelect.propTypes = {
  className: _propTypes2["default"].string,
  prefixCls: _propTypes2["default"].string,
  config: _propTypes2["default"].array,
  options: _propTypes2["default"].array,
  cascadeSize: _propTypes2["default"].number,
  value: _propTypes2["default"].array,
  notFoundContent: _propTypes2["default"].string,
  allowClear: _propTypes2["default"].bool,
  locale: _propTypes2["default"].string,
  onSelect: _propTypes2["default"].func,
  onItemClick: _propTypes2["default"].func,

  placeholder: _propTypes2["default"].string,
  disabled: _propTypes2["default"].bool,
  defaultValue: _propTypes2["default"].array,
  dropdownClassName: _propTypes2["default"].string,
  onOk: _propTypes2["default"].func,
  onCancel: _propTypes2["default"].func,
  getPopupContainer: _propTypes2["default"].func,

  beforeRender: _propTypes2["default"].func,
  readOnly: _propTypes2["default"].bool,
  keyCouldDuplicated: _propTypes2["default"].bool,
  isCleanDisabledLabel: _propTypes2["default"].bool
};

CascadeMultiSelect.displayName = 'CascadeMultiSelect';

CascadeMultiSelect.CascadeMultiPanel = _CascadeMultiPanel2["default"];
CascadeMultiSelect.CascadeMultiModal = _CascadeMultiModal2["default"];

module.exports = CascadeMultiSelect;