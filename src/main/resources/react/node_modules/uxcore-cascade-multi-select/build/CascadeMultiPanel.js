'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames5 = require('classnames');

var _classnames6 = _interopRequireDefault(_classnames5);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * CascadeMultiSelect Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author changming<changming.zy@alibaba-inc.com>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2017, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var CascadeMulti = function (_React$Component) {
  _inherits(CascadeMulti, _React$Component);

  function CascadeMulti(props) {
    _classCallCheck(this, CascadeMulti);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      dataList: [],
      selectArray: []
    };
    _this.itemCheckedStatus = [];
    return _this;
  }

  CascadeMulti.prototype.componentDidMount = function componentDidMount() {
    var _props = this.props,
        value = _props.value,
        options = _props.options;

    if (value) {
      this.setData(value, options);
    }
  };

  CascadeMulti.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var value = nextProps.value,
        options = nextProps.options;

    this.setData(value, options);
  };

  /**
   * 选项列表点击事件
   */


  CascadeMulti.prototype.onItemClick = function onItemClick(data, level) {
    var selectArray = this.state.selectArray;

    if (data.$id !== selectArray[level]) {
      selectArray.splice(level + 1);
    }
    selectArray[level] = data.$id;
    if (this.props.onItemClick) {
      this.props.onItemClick({
        value: data.value,
        label: data.label,
        children: data.children
      }, level + 1, selectArray);
    }
    this.setState({ selectArray: selectArray });
  };

  /**
   * 选中/取消选项事件
   */


  CascadeMulti.prototype.onItemChecked = function onItemChecked(item, level) {
    var _this2 = this;

    var isCleanDisabledLabel = this.props.isCleanDisabledLabel;
    var dataList = this.state.dataList;

    var treeNodeObj = this.getTreeNodeData(dataList, item.$id);
    var itemNode = treeNodeObj.itemNode;

    itemNode.checked = !itemNode.checked;
    itemNode.halfChecked = false;
    this.itemDisabledNodes = [];
    // 设置子集全部选中
    if (itemNode.children) {
      itemNode.children = this.setChildrenChecked(itemNode.children, itemNode.checked);
    }
    if (!isCleanDisabledLabel && this.itemDisabledNodes.length > 0) {
      // 根据「this.itemCheckedStatus」决定状态
      itemNode.checked = false;
      itemNode.halfChecked = true;
      var itemDisabledNode = this.itemDisabledNodes.pop();
      while (itemDisabledNode) {
        this.setFatherCheckState(itemDisabledNode, itemDisabledNode.checked);
        itemDisabledNode = this.itemDisabledNodes.pop();
      }
    } else if (level) {
      // 设置父级选中状态
      this.setFatherCheckState(itemNode, itemNode.checked);
    }
    this.setState({ dataList: dataList }, function () {
      _this2.setSelectResult();
    });
  };

  /**
   * 清空结果事件
   */


  CascadeMulti.prototype.onCleanSelect = function onCleanSelect() {
    var dataList = this.state.dataList;
    var value = this.props.value;

    this.setState({
      dataList: this.setCleanResult(dataList)
    }, function onSelect() {
      if (this.props.isCleanDisabledLabel) {
        this.props.onSelect([], [], []);
      } else {
        var _getDisabledValueLabe = (0, _utils.getDisabledValueLabel)(dataList, value),
            disabledNodes = _getDisabledValueLabe.disabledNodes,
            leafList = _getDisabledValueLabe.leafNodes;

        var valueList = [];
        var labelList = [];
        disabledNodes.forEach(function (item) {
          valueList.push(item.value);
          labelList.push(item.label);
        });
        this.props.onSelect(valueList, labelList, leafList, (0, _utils.getCascadeSelected)(this.state.dataList, valueList));
      }
    });
  };

  /**
   * 展开/收起结果列
   */


  CascadeMulti.prototype.onTriggerNode = function onTriggerNode(item) {
    var dataList = this.state.dataList;

    var treeNodeObj = this.getTreeNodeData(dataList, item.$id);
    var itemNode = treeNodeObj.itemNode;

    itemNode.expand = !itemNode.expand;
    this.setState({ dataList: dataList });
  };

  /**
   * 删除选项事件
   */


  CascadeMulti.prototype.onDeleteItem = function onDeleteItem(item, level) {
    var dataList = this.state.dataList;

    var treeNodeObj = this.getTreeNodeData(dataList, item.$id);
    var itemNode = treeNodeObj.itemNode;

    itemNode.checked = false;
    itemNode.halfChecked = false;
    if (itemNode.children) {
      itemNode.children = this.setChildrenChecked(itemNode.children, false);
    }
    if (level) {
      this.setFatherCheckState(itemNode, false);
    }
    this.setSelectResult();
  };

  /**
   * 获取选中的结果
   * @param dataList 组件选项列表
   * @param arr 存放结果 value 的数组
   * @param textArr 存放结果 label 的数组
   * @param back 存放选中的级联结构
   */


  CascadeMulti.prototype.getSelectResult = function getSelectResult(dataList, arr, textArr) {
    var _this3 = this;

    var back = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    if (dataList && dataList.length) {
      dataList.forEach(function (item) {
        if (item.checked) {
          arr.push(item.value);
          textArr.push(item.label);
          back.push(item);
        }
        if (item.halfChecked) {
          var backItem = {
            label: item.label,
            value: item.value,
            children: []
          };
          backItem.children = _this3.getSelectResult(item.children, arr, textArr, backItem.children);
          back.push(backItem);
        }
      });
    }
    return back;
  };

  CascadeMulti.prototype.getAllLeafNode = function getAllLeafNode() {
    var _this4 = this;

    var dataList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var back = [];
    dataList.forEach(function (item) {
      if ((item.checked || item.halfChecked) && item.children && item.children.length) {
        back = back.concat(_this4.getAllLeafNode(item.children));
      } else if (item.checked) {
        back.push({
          value: item.value,
          label: item.label
        });
      }
    });
    return back;
  };

  /**
   * 获取选中的数量
   */


  CascadeMulti.prototype.getNums = function getNums(dataList) {
    var _this5 = this;

    if (dataList && dataList.length) {
      dataList.forEach(function (item) {
        if (item.checked || item.halfChecked) {
          _this5.selectNums += 1;
          if (item.children) {
            _this5.getNums(item.children);
          } else {
            _this5.handleSelectNums += 1;
          }
        }
      });
    }
  };

  /**
   * 根据传入的 key 获取其节点，父节点
   * @param dataList 组件的 options
   * @param key 要查询的 item.$id 也有可能是 $item.value
   * @param parentNode 父节点（方法自用）
   */


  CascadeMulti.prototype.getTreeNodeData = function getTreeNodeData(dataList, key) {
    var parentNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var back = null;
    if (!key) {
      return null;
    }
    if (dataList && dataList.length) {
      for (var i = 0, len = dataList.length; i < len; i += 1) {
        var theKey = '' + key;
        if (this.props.keyCouldDuplicated && theKey.indexOf('/') === -1) {
          theKey = dataList[i].rootNum + '/' + key;
        }
        if (dataList[i].$id === theKey) {
          return {
            parentNode: parentNode,
            itemNode: dataList[i]
          };
        }
        if (dataList[i].children) {
          var item = this.getTreeNodeData(dataList[i].children, theKey, dataList[i]);
          back = item || back;
        }
      }
    }
    return back;
  };

  /**
   * 获取兄弟节点指定选中状态
   * @param botherList 兄弟节点列表
   * @param state 查询的选中状态
   * @return 兄弟节点中包含对应状态结果 boolean
   */


  CascadeMulti.prototype.getBotherCheckedState = function getBotherCheckedState(botherList, state) {
    var handleCheckedState = false;
    if (botherList && botherList.length) {
      for (var i = 0, len = botherList.length; i < len; i += 1) {
        // 查询是否存在选中
        if (state) {
          if (botherList[i].checked || botherList[i].halfChecked) {
            handleCheckedState = true;
            break;
          }
        } else {
          // 查询是否存在未选中
          // 要么未选中，要么半选中状态
          if (!botherList[i].checked && !botherList[i].halfChecked || !botherList[i].checked && botherList[i].halfChecked) {
            handleCheckedState = true;
            break;
          }
        }
      }
    }
    return handleCheckedState;
  };

  /**
   * 外部设置组件的 value
   * @param value 设置的结果
   * @param options 选项列表
   * @param from 从哪里调用
   */


  CascadeMulti.prototype.setData = function setData(value, options) {
    var callFrom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';

    var dataList = (0, _cloneDeep2["default"])(options);
    this.allItemDisabled = true; // 所有选项都被禁用
    if (dataList && dataList.length) {
      dataList = this.setCleanResult(dataList, true);
      for (var i = 0, len = value.length; i < len; i += 1) {
        var $id = value[i];
        var treeNodeObj = this.getTreeNodeData(dataList, $id);
        if (treeNodeObj) {
          var parentNode = treeNodeObj.parentNode,
              itemNode = treeNodeObj.itemNode;

          itemNode.checked = true;
          if (itemNode.children) {
            itemNode.children = this.setChildrenChecked(itemNode.children, true, true);
          }
          if (parentNode) {
            this.setFatherCheckState(itemNode, true, dataList);
          }
        }
      }
    }

    if (callFrom === 'default') {
      this.setState({ dataList: dataList });
    }

    return dataList;
  };

  /**
   * 设置children选中/取消状态
   * @param childrenList 子集
   * @param checked 设置的状态
   */


  CascadeMulti.prototype.setChildrenChecked = function setChildrenChecked(dataList, checked) {
    var isCleanDisabledLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.props.isCleanDisabledLabel;

    var childrenList = (0, _cloneDeep2["default"])(dataList);
    if (childrenList && childrenList.length) {
      for (var i = 0; i < childrenList.length; i++) {
        var item = childrenList[i];
        if (!isCleanDisabledLabel && item.disabled) {
          if (checked !== item.checked) {
            this.itemDisabledNodes.push(item);
          }
        } else {
          item.checked = checked;
          item.halfChecked = false;
          if (item.children) {
            item.children = this.setChildrenChecked(item.children, checked, isCleanDisabledLabel);
          }
        }
      }
    }
    return childrenList;
  };

  /**
   * 设置父亲节点的选中/半选中状态
   * @param item 当前节点
   * @param checked 设置状态
   */


  CascadeMulti.prototype.setFatherCheckState = function setFatherCheckState(item, checked) {
    var dataList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.state.dataList;

    var treeNodeObj = this.getTreeNodeData(dataList, item.$id);
    var parentNode = treeNodeObj.parentNode;

    if (parentNode) {
      var halfChecked = this.getBotherCheckedState(parentNode.children, !checked);
      if (halfChecked) {
        parentNode.checked = !halfChecked;
        parentNode.halfChecked = halfChecked;
      } else {
        parentNode.checked = checked;
        parentNode.halfChecked = false;
      }
      this.setFatherCheckState(parentNode, checked, dataList);
    }
  };

  /**
   * 设置选中的结果
   */


  CascadeMulti.prototype.setSelectResult = function setSelectResult() {
    var arr = [];
    this.textArr = [];
    this.leafArr = this.getAllLeafNode(this.state.dataList);
    var cascadeSelected = this.getSelectResult(this.state.dataList, arr, this.textArr);
    this.props.onSelect(arr, this.textArr, this.leafArr, cascadeSelected);
  };

  /**
   * 清空
   */


  CascadeMulti.prototype.setCleanResult = function setCleanResult(dataList) {
    var _this6 = this;

    var isCleanDisabledLabel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.isCleanDisabledLabel;

    var listArray = (0, _cloneDeep2["default"])(dataList);
    var recursion = function recursion(list) {
      var rootNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var ancestorNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var isChildrenCheck = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if (list && list.length) {
        // 处理 dataList 添加根节点标识，因为除了第一级、根级以外其余级别可能会重复
        for (var i = 0; i < list.length; i++) {
          var newAncestorNodes = [];
          var item = list[i];
          item.halfChecked = false;
          item.rootNum = rootNum === -1 ? i : rootNum;
          item.$id = _this6.props.keyCouldDuplicated ? item.rootNum + '/' + item.value : '' + item.value; // 如果每一级的 value 有可能会重复时，则使用 rootNum + value 作为 id
          if (!isChildrenCheck) {
            // 当isCleanDisabledLabel=false,被选中且disabled节点需处理父级的halfChecked
            if (!isCleanDisabledLabel && item.disabled && item.checked) {
              newAncestorNodes.forEach(function (ii) {
                ii.halfChecked = true; // eslint-disable-line
              });
              isChildrenCheck = true; // eslint-disable-line
            } else {
              item.checked = false;
            }
          }
          newAncestorNodes = ancestorNodes.concat(item);
          if (item.children) {
            recursion(item.children, item.rootNum, newAncestorNodes, isChildrenCheck);
          }
          if (item.disabled !== true) {
            _this6.allItemDisabled = false;
          }
        }
      }
    };

    recursion(listArray);

    return listArray;
  };

  /**
   * 设置组件宽度样式，兼容名称过长时显示效果等
   */


  CascadeMulti.prototype.setPanelWidth = function setPanelWidth() {
    var resultPanelWidth = (0, _utils.getWidthStyle)(this.refResultPanel, 220);
    this.resultPanelWidth = parseInt(resultPanelWidth, 0);
  };

  /**
   * 渲染对应级的选项面板
   */


  CascadeMulti.prototype.renderUlList = function renderUlList(level) {
    var _this7 = this;

    var t = this;
    var _props2 = this.props,
        prefixCls = _props2.prefixCls,
        notFoundContent = _props2.notFoundContent,
        config = _props2.config,
        locale = _props2.locale;
    var _state = this.state,
        dataList = _state.dataList,
        selectArray = _state.selectArray;

    if (!dataList.length) {
      return _react2["default"].createElement('ul', {
        key: level,
        className: (0, _classnames6["default"])(_defineProperty({
          'use-svg': true
        }, prefixCls + '-content', true)),
        ref: function ref(r) {
          _this7.refUls = r;
        }
      });
    }
    var treeNodeObj = t.getTreeNodeData(dataList, selectArray[level - 1]);
    var childrenList = treeNodeObj && treeNodeObj.itemNode && treeNodeObj.itemNode.children && treeNodeObj.itemNode.children.length ? treeNodeObj.itemNode.children : [];
    var listArray = level ? childrenList : dataList;
    var noDataText = notFoundContent || (0, _locale2["default"])(locale).noData;
    return _react2["default"].createElement(
      'div',
      { key: level, className: prefixCls + '-content' },
      config[level] && config[level].showSearch ? _react2["default"].createElement(
        'div',
        { style: { margin: '-5px 5px 5px' } },
        _react2["default"].createElement('input', {
          className: 'kuma-input kuma-input-small-size',
          placeholder: (0, _locale2["default"])(locale).filter,
          onChange: function onChange(e) {
            var val = e.target.value;
            var keywords = _this7.keywords || [];
            keywords[level] = val;
            clearTimeout(_this7.showSearchKeywordsTiming);
            _this7.showSearchKeywordsTiming = setTimeout(function () {
              _this7.setState({ showSearchKeywords: keywords });
            }, 200);
          }
        })
      ) : null,
      _react2["default"].createElement(
        'ul',
        {
          className: 'use-svg',
          ref: function ref(r) {
            _this7.refUls = r;
          }
        },
        selectArray[level - 1] && !listArray.length ? _react2["default"].createElement(
          'span',
          { className: (0, _classnames6["default"])([prefixCls + '-list-noData']) },
          noDataText
        ) : t.renderListItems(listArray, level)
      )
    );
  };

  /**
   * 渲染对应级的 ListItem
   */


  CascadeMulti.prototype.renderListItems = function renderListItems(dataList, level) {
    var _this8 = this;

    var _props3 = this.props,
        prefixCls = _props3.prefixCls,
        config = _props3.config,
        mode = _props3.mode;
    var selectArray = this.state.selectArray;

    var arr = [];
    // 设置当前级是否开启 checkbox
    var checkable = !(config[level] && config[level].checkable === false);
    dataList.forEach(function (item) {
      var _classnames2, _classnames3;

      // 如果只是用面板，则默认选择第一项
      if (mode === 'independent' && !selectArray[level]) {
        selectArray[level] = item.$id;
      }

      var showSearchKeywords = _this8.state.showSearchKeywords;

      if (showSearchKeywords && item.label && item.label.indexOf(showSearchKeywords) === -1) {
        return;
      }

      arr.push(_react2["default"].createElement(
        'li',
        {
          key: item.$id,
          className: (0, _classnames6["default"])((_classnames2 = {}, _defineProperty(_classnames2, prefixCls + '-list-item', !!prefixCls), _defineProperty(_classnames2, prefixCls + '-checked', item.checked && !item.disabled), _defineProperty(_classnames2, prefixCls + '-list-item-active', selectArray[level] === item.$id), _classnames2)),
          title: item.label,
          onClick: function onClick() {
            _this8.onItemClick(item, level);
          }
        },
        _react2["default"].createElement(
          'label',
          {
            className: (0, _classnames6["default"])((_classnames3 = {}, _defineProperty(_classnames3, prefixCls + '-item-label', true), _defineProperty(_classnames3, prefixCls + '-item-disabled', item.disabled), _classnames3))
          },
          checkable ? _react2["default"].createElement('s', {
            className: (0, _classnames6["default"])({
              'kuma-tree-checkbox': true,
              'kuma-tree-checkbox-indeterminate': item.halfChecked,
              'kuma-tree-checkbox-checked': item.checked && !item.halfChecked,
              'kuma-tree-checkbox-checkbox-disabled': item.disabled,
              'kuma-tree-checkbox-disabled': item.disabled
            }),
            onClick: function onClick() {
              if (!item.disabled) {
                _this8.onItemChecked(item, level);
              }
            }
          }) : null,
          item.label
        )
      ));
    });
    return arr;
  };

  /**
   * 渲染结果面板
   */


  CascadeMulti.prototype.renderResult = function renderResult() {
    var _this9 = this;

    var _props4 = this.props,
        prefixCls = _props4.prefixCls,
        allowClear = _props4.allowClear,
        locale = _props4.locale;

    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames6["default"])([prefixCls + '-result']),
        ref: function ref(r) {
          _this9.refResultPanel = r;
        }
      },
      _react2["default"].createElement(
        'div',
        { className: (0, _classnames6["default"])([prefixCls + '-result-title']) },
        (0, _locale2["default"])(locale).selected,
        ' ',
        this.renderResultNums(),
        allowClear && this.allItemDisabled === false ? _react2["default"].createElement(
          'span',
          {
            className: (0, _classnames6["default"])([prefixCls + '-result-clean']),
            onClick: function onClick() {
              _this9.onCleanSelect();
            }
          },
          (0, _locale2["default"])(locale).clean
        ) : null
      ),
      this.renderResultTree()
    );
  };

  /**
   * 渲染已选中节点数量
   */


  CascadeMulti.prototype.renderResultNums = function renderResultNums() {
    var dataList = this.state.dataList;
    // 记录所有选中的叶子节点

    this.handleSelectNums = 0;
    // 记录所有选中的节点
    this.selectNums = 0;
    this.getNums(dataList);
    return _react2["default"].createElement(
      'span',
      null,
      '(',
      this.handleSelectNums,
      ')'
    );
  };

  /**
   * 渲染已选择结果 TreeList
   */


  CascadeMulti.prototype.renderResultTree = function renderResultTree() {
    var prefixCls = this.props.prefixCls;
    var dataList = this.state.dataList;

    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames6["default"])([prefixCls + '-result-tree'])
      },
      this.renderTreeListNode(dataList, 0)
    );
  };

  /**
   * 渲染已选择结果 TreeListNode
   */


  CascadeMulti.prototype.renderTreeListNode = function renderTreeListNode(dataList, level) {
    var _this10 = this;

    var _props5 = this.props,
        cascadeSize = _props5.cascadeSize,
        isCleanDisabledLabel = _props5.isCleanDisabledLabel;

    var arr = [];
    if (dataList && dataList.length) {
      dataList.forEach(function (item) {
        if (item.checked || item.halfChecked) {
          // 设置 label 的宽度
          var style = { maxWidth: 0 };
          // 86 = marginLeft（15） + 箭头icon占位宽度（21） + "删除"按钮的宽度（30） + marginRight（20）
          style.maxWidth = _this10.resultPanelWidth - 86 - level * 15;
          // 56 = "已选择"文字宽度
          style.maxWidth -= level < cascadeSize - 1 && item.checked ? 56 : 0;
          var isDelete = !item.disabled;
          if (!isCleanDisabledLabel) {
            isDelete = item.checked && !item.disabled;
          }
          arr.push(_react2["default"].createElement(
            'li',
            {
              className: (0, _classnames6["default"])('tree-node-ul-li', {
                'tree-node-ul-li-open': !item.expand,
                'tree-node-ul-li-close': item.expand
              }),
              ref: function ref(r) {
                _this10.refResultUl = r;
              },
              title: item.label,
              key: item.$id,
              onClick: function onClick(e) {
                e.stopPropagation();
                _this10.onTriggerNode(item);
              }
            },
            _react2["default"].createElement(
              'div',
              {
                className: (0, _classnames6["default"])('tree-node-ul-li-div'),
                style: { paddingLeft: (level + 1) * 15 }
              },
              _this10.renderExpand(item),
              _react2["default"].createElement(
                'span',
                { className: (0, _classnames6["default"])('tree-node-ul-li-span') },
                _react2["default"].createElement(
                  'span',
                  {
                    className: 'tree-node-ul-li-span-label',
                    style: style
                  },
                  item.label
                ),
                level < cascadeSize - 1 && item.checked && item.children && item.children.length ? _react2["default"].createElement(
                  'span',
                  { className: 'tree-node-ul-li-all' },
                  (0, _locale2["default"])(_this10.props.locale).haveAll
                ) : null,
                !isDelete ? null : _react2["default"].createElement(
                  'span',
                  {
                    className: 'tree-node-ul-li-del',
                    onClick: function onClick(e) {
                      e.stopPropagation();
                      _this10.onDeleteItem(item, level);
                    }
                  },
                  (0, _locale2["default"])(_this10.props.locale)["delete"]
                )
              )
            ),
            item.children && !item.expand ? _this10.renderTreeListNode(item.children, level + 1) : null
          ));
        }
      });
    }
    return _react2["default"].createElement(
      'ul',
      {
        className: (0, _classnames6["default"])('tree-node-ul')
      },
      arr
    );
  };

  /**
   * 渲染结果列表展开/收缩按钮
   */


  CascadeMulti.prototype.renderExpand = function renderExpand(item) {
    var arr = [];
    if (item.children && item.children.length) {
      arr = !item.expand ? _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-triangle-down' }) : _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-triangle-right' });
    } else {
      // 21 = kuma-icon的占位宽度
      arr = _react2["default"].createElement('span', { style: { width: '21px', display: 'inline-block' } });
    }
    return arr;
  };

  CascadeMulti.prototype.render = function render() {
    var _props6 = this.props,
        className = _props6.className,
        prefixCls = _props6.prefixCls,
        cascadeSize = _props6.cascadeSize,
        mode = _props6.mode;

    var arr = [];
    var minWidth = 0;
    for (var i = 0; i < cascadeSize; i += 1) {
      arr.push(this.renderUlList(i));
      minWidth = 150 * cascadeSize + 222;
    }
    this.setPanelWidth();
    var back = _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames6["default"])(_defineProperty({}, className, !!className), ['' + prefixCls]),
        onClick: function onClick(e) {
          e.stopPropagation();
        },
        style: { minWidth: minWidth }
      },
      arr,
      this.renderResult()
    );

    if (mode === 'independent') {
      return _react2["default"].createElement(
        'div',
        { style: { overflow: 'hidden' } },
        back
      );
    }

    return back;
  };

  return CascadeMulti;
}(_react2["default"].Component);

CascadeMulti.defaultProps = {
  className: '',
  prefixCls: 'kuma-cascade-multi',
  config: [],
  options: [],
  cascadeSize: 3,
  value: [],
  notFoundContent: '',
  allowClear: true,
  locale: 'zh-cn',
  onSelect: function onSelect() {},
  onItemClick: function onItemClick() {},
  mode: 'independent',
  keyCouldDuplicated: false,
  isCleanDisabledLabel: false
};

CascadeMulti.propTypes = {
  className: _propTypes2["default"].string,
  prefixCls: _propTypes2["default"].string,
  config: _propTypes2["default"].array,
  options: _propTypes2["default"].array,
  cascadeSize: _propTypes2["default"].number,
  value: _propTypes2["default"].array,
  notFoundContent: _propTypes2["default"].string,
  allowClear: _propTypes2["default"].bool,
  locale: _propTypes2["default"].string,
  onSelect: _propTypes2["default"].func,
  onItemClick: _propTypes2["default"].func,
  mode: _propTypes2["default"].oneOf(['independent', 'mix']),
  keyCouldDuplicated: _propTypes2["default"].bool,
  isCleanDisabledLabel: _propTypes2["default"].bool
};

CascadeMulti.displayName = 'CascadeMulti';

module.exports = CascadeMulti;