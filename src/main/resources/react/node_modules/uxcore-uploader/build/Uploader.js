'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uploadcore = require('uploadcore/dist/uploadcore');

var _uxcoreButton = require('uxcore-button');

var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _FileList = require('./FileList');

var _FileList2 = _interopRequireDefault(_FileList);

var _Picker = require('./Picker');

var _Picker2 = _interopRequireDefault(_Picker);

var _Dropzoom = require('./Dropzoom');

var _Dropzoom2 = _interopRequireDefault(_Dropzoom);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var RESETOPTIONS = ['name', 'url', 'params', 'action', 'data', 'headers', 'withCredentials', 'timeout', 'chunkEnable', 'chunkSize', 'chunkRetries', 'chunkProcessThreads', 'autoPending', 'auto', 'sizeLimit', 'fileSizeLimit', 'queueCapcity'];

var Uploader = function (_React$Component) {
  _inherits(Uploader, _React$Component);

  function Uploader(props) {
    _classCallCheck(this, Uploader);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.core = _util2["default"].getCoreInstance(props);
    _this.fileList = _this.getDefaultList();
    _this.state = {
      total: _this.core.getTotal(),
      fileList: _this.processDefaultList(_this.fileList)
    };
    return _this;
  }

  Uploader.prototype.componentWillMount = function componentWillMount() {
    var _this2 = this;

    var me = this;
    me.statchange = function (stat) {
      var total = stat.getTotal();
      if (total !== me.state.total) {
        me.setState({ total: total });
      }
    };
    me.fileuploadstart = function (file) {
      if (file.status === _uploadcore.Status.PROGRESS) {
        me.forceUpdate();
      }
    };
    me.fileuploadsuccess = function (file) {
      var newList = _util2["default"].simpleDeepCopy(me.state.fileList);
      newList.push(me.processFile(file));
      if (me.props.actionOnQueueLimit === 'cover') {
        // the last ones will exist
        var count = 0;
        var coveredList = [];
        for (var i = newList.length - 1; i >= 0; i--) {
          if (count === me.props.queueCapcity) {
            break;
          }
          var item = newList[i];
          if (item.type !== 'delete') {
            count += 1;
          }
          coveredList.push(item);
        }
        newList = coveredList.reverse();
      }
      me.handleChange(newList);
      file.cancel(true);
      me.core.getStat().remove(file);
    };

    me.filecancel = function (file) {
      var onCancel = me.props.onCancel;
      var onfilecancel = me.props.onfilecancel;
      var newList = _util2["default"].simpleDeepCopy(me.state.fileList);
      newList.push({
        type: 'delete',
        response: file.response ? file.response.getJson() : null
      });
      me.handleChange(newList);
      if (onfilecancel) onfilecancel(file);
      if (onCancel) onCancel(me.processFile(file));
    };
    me.core.on(_uploadcore.Events.QUEUE_STAT_CHANGE, me.statchange);
    me.core.on(_uploadcore.Events.FILE_UPLOAD_START, me.fileuploadstart);
    me.core.on(_uploadcore.Events.FILE_UPLOAD_SUCCESS, me.fileuploadsuccess);
    me.core.on(_uploadcore.Events.FILE_CANCEL, me.filecancel);
    me.core.addConstraint(function () {
      var queueCapcity = me.props.queueCapcity;
      var actionOnQueueLimit = me.props.actionOnQueueLimit;
      if (queueCapcity === undefined || queueCapcity === null || queueCapcity <= 0 || actionOnQueueLimit === 'cover') {
        return false;
      }
      return me.state.fileList.filter(function (file) {
        return file.type !== 'delete';
      }).length + me.core.getTotal() >= queueCapcity;
    });
    me.core.addFilter(function (file) {
      if (me.props.preventDuplicate) {
        if (_this2.state.fileList.some(function (item) {
          return item.type === 'upload' && item.name === file.name && item.size === file.size;
        })) {
          return 'DuplicateError: ' + file.name + ' is duplicated';
        }
      }
    });
  };

  Uploader.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var me = this;
    var newState = {};
    var options = {};
    if (!_util2["default"].simpleDeepEqual(nextProps.fileList, me.fileList)) {
      me.fileList = me.getDefaultList(nextProps);
      me.setState({
        fileList: me.processDefaultList(me.fileList)
      });
    }
    RESETOPTIONS.forEach(function (item) {
      if (nextProps.hasOwnProperty(item) && me.props[item] !== nextProps[item]) {
        options[item] = nextProps[item];
      }
    });
    me.core.setOptions && me.core.setOptions(options);
  };

  Uploader.prototype.componentWillUnmount = function componentWillUnmount() {
    this.stopListen();
  };

  Uploader.prototype.getCore = function getCore() {
    return this.core;
  };

  Uploader.prototype.stopListen = function stopListen() {
    this.core.off(_uploadcore.Events.QUEUE_STAT_CHANGE, this.statchange);
    this.core.off(_uploadcore.Events.FILE_UPLOAD_SUCCESS, this.fileuploadsuccess);
    this.core.off(_uploadcore.Events.FILE_CANCEL, this.filecancel);
  };

  Uploader.prototype.reset = function reset() {
    var _this3 = this;

    this.core.getFiles().forEach(function (file) {
      file.cancel(true);
      _this3.core.getStat().remove(file);
    });
    this.forceUpdate();
  };

  /**
   * deepcopy props.filelist for comparision in `componentWillReceiveProps`
   */


  Uploader.prototype.getDefaultList = function getDefaultList(props) {
    var me = this;
    props = props || me.props;
    return _util2["default"].simpleDeepCopy(props.fileList);
  };

  Uploader.prototype.addUniqueIdForList = function addUniqueIdForList(fileList) {
    var newList = _util2["default"].simpleDeepCopy(fileList);
    newList = newList.map(function (file, index) {
      file.__uploaderId = 'uploader' + index;
      return file;
    });
    return newList;
  };

  Uploader.prototype.processFile = function processFile(file) {
    return {
      ext: file.ext,
      name: file.name,
      size: file.size,
      fileType: file.type,
      type: 'upload',
      response: file.response ? file.response.getJson() : null
    };
  };

  Uploader.prototype.processDefaultList = function processDefaultList(fileList) {
    var me = this;
    return me.addUniqueIdForList(fileList).map(function (file) {
      return me.processDefaultListFile(file);
    });
  };

  /**
   * process file in this.props.fileList
   */


  Uploader.prototype.processDefaultListFile = function processDefaultListFile(file) {
    !file.type && (file.type = 'list');
    return file;
  };

  Uploader.prototype.handleRemoveFile = function handleRemoveFile(file) {
    var me = this;
    var newList = _util2["default"].simpleDeepCopy(me.state.fileList);
    newList = newList.map(function (item) {
      if (item.__uploaderId === file.__uploaderId) {
        item.subType = item.type;
        item.type = 'delete';
      }
      return item;
    });
    me.handleChange(newList);
    me.props.onCancel && me.props.onCancel(file);
  };

  Uploader.prototype.handleChange = function handleChange(fileList) {
    var me = this;
    me.props.onChange(fileList);
  };

  Uploader.prototype.getUploadingFiles = function getUploadingFiles() {
    return this.core.getFiles().filter(function (file) {
      return [_uploadcore.Status.CANCELLED, _uploadcore.Status.SUCCESS, _uploadcore.Status.QUEUED].indexOf(file.status) === -1;
    });
  };

  Uploader.prototype.getNotDeletedDefaultFiles = function getNotDeletedDefaultFiles() {
    return (this.state.fileList || []).filter(function (file) {
      return !file.type || file.type !== 'delete';
    });
  };

  Uploader.prototype.renderTips = function renderTips() {
    var tips = this.props.tips;

    if (tips) {
      return _react2["default"].createElement(
        'div',
        { key: 'tips', className: 'kuma-upload-tip' },
        tips
      );
    }
    return null;
  };

  Uploader.prototype.render = function render() {
    var me = this;
    var _props = this.props,
        locale = _props.locale,
        isVisual = _props.isVisual;

    var children = this.props.children;
    var readOnly = this.props.readOnly;
    var uploadingFiles = me.getUploadingFiles();
    var notDeletedDefaultFiles = me.getNotDeletedDefaultFiles();
    if (!children || children.length < 1) {
      if (isVisual) {
        children = _react2["default"].createElement(
          'button',
          { className: 'kuma-upload-button' },
          _locale2["default"][locale + '-img'].upload_files
        );
      } else {
        children = _react2["default"].createElement(
          _uxcoreButton2["default"],
          { type: 'secondary', size: 'small' },
          _locale2["default"][locale].upload_files
        );
      }
    }
    var tips = readOnly ? null : this.renderTips();
    var picker = readOnly ? null : _react2["default"].createElement(
      _Picker2["default"],
      {
        key: 'picker',
        core: this.core,
        isVisual: this.props.isVisual
      },
      children
    );
    var files = uploadingFiles.length > 0 || notDeletedDefaultFiles.length > 0 ? _react2["default"].createElement(_FileList2["default"], {
      key: 'files',
      locale: this.props.locale,
      core: this.core,
      isVisual: this.props.isVisual,
      isOnlyImg: this.props.isOnlyImg,
      readOnly: this.props.readOnly,
      showErrFile: this.props.showErrFile,
      mode: 'nw',
      fileList: me.state.fileList,
      removeFileFromList: me.handleRemoveFile.bind(me),
      interval: this.props.progressInterval
    }) : null;
    var contents = isVisual ? [tips, files, picker] : [picker, tips, files];

    return _react2["default"].createElement(
      'div',
      { className: 'kuma-uploader ' + (this.props.className || '') },
      contents
    );
  };

  return Uploader;
}(_react2["default"].Component);

Uploader.Dropzoom = _Dropzoom2["default"];
Uploader.Events = _uploadcore.Events;
Uploader.Status = _uploadcore.Status;

Uploader.setSWF = function (swf) {
  _uploadcore.UploadCore.setSWF(swf);
};

Uploader.displayName = 'Uploader';
Uploader.defaultProps = {
  locale: 'zh-cn',
  autoPending: true,
  fileList: [],
  onChange: function onChange() {},
  onError: function onError() {},
  isVisual: false,
  isOnlyImg: false,
  showErrFile: true
};
Uploader.propTypes = {
  locale: _propTypes2["default"].string,
  fileList: _propTypes2["default"].array,
  onChange: _propTypes2["default"].func,
  onError: _propTypes2["default"].func,
  tips: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number, _propTypes2["default"].element]),
  className: _propTypes2["default"].string,
  isVisual: _propTypes2["default"].bool,
  isOnlyImg: _propTypes2["default"].bool,
  showErrFile: _propTypes2["default"].bool,
  children: _propTypes2["default"].any
};
exports["default"] = Uploader;
module.exports = exports['default'];