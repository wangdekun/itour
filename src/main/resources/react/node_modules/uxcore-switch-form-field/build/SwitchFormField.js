'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _uxcoreSwitch = require('uxcore-switch');

var _uxcoreSwitch2 = _interopRequireDefault(_uxcoreSwitch);

var _uxcoreFormField = require('uxcore-form-field');

var _uxcoreFormField2 = _interopRequireDefault(_uxcoreFormField);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * SwitchFormField Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var SwitchFormField = function (_FormField) {
  _inherits(SwitchFormField, _FormField);

  function SwitchFormField() {
    _classCallCheck(this, SwitchFormField);

    return _possibleConstructorReturn(this, _FormField.apply(this, arguments));
  }

  SwitchFormField.prototype.addSpecificClass = function addSpecificClass() {
    var me = this;
    if (me.props.jsxprefixCls === "kuma-uxform-field") {
      return me.props.jsxprefixCls + " kuma-switch-uxform-field";
    } else {
      return me.props.jsxprefixCls;
    }
  };

  SwitchFormField.prototype.handleChange = function handleChange(checked) {
    var me = this;
    me.handleDataChange(checked);
  };

  SwitchFormField.prototype.renderField = function renderField() {
    var me = this;
    var switchUselessPropKeys = ['jsxlabel', 'verticalAlign', 'labelMatchInputHeight', 'jsxshow', 'jsxshowLabel', 'jsxprefixCls', 'jsxflex', 'jsxname', 'jsxplaceholder', 'jsxtips', 'standalone', 'jsxinstant', 'jsxVerticalAlign', 'jsxsize', 'asyncValidate', 'totalFlex', 'attachFormField', 'detachFormField', 'handleDataChange', 'getValues', 'resetValues'];
    var switchProps = _extends({}, me.props);

    switchUselessPropKeys.forEach(function (key) {
      if (switchProps.hasOwnProperty(key)) {
        delete switchProps[key];
      }
    });

    var mode = me.props.jsxmode || me.props.mode;

    if (mode === _uxcoreConst2["default"].MODE.EDIT) {
      return _react2["default"].createElement(_uxcoreSwitch2["default"], _extends({}, switchProps, { checked: me.state.value, onChange: me.handleChange.bind(me), style: {}, className: '' }));
    }
    return _react2["default"].createElement(
      'span',
      null,
      me.state.value ? me.props.checkedChildren : me.props.unCheckedChildren
    );
  };

  return SwitchFormField;
}(_uxcoreFormField2["default"]);

SwitchFormField.defaultProps = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].defaultProps);

// http://facebook.github.io/react/docs/reusable-components.html
SwitchFormField.propTypes = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].propTypes);

SwitchFormField.displayName = 'SwitchFormField';

module.exports = SwitchFormField;