'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreFormField = require('uxcore-form-field');

var _uxcoreFormField2 = _interopRequireDefault(_uxcoreFormField);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _uxcoreSelect = require('uxcore-select2');

var _uxcoreSelect2 = _interopRequireDefault(_uxcoreSelect);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _nattyFetch = require('natty-fetch');

var _nattyFetch2 = _interopRequireDefault(_nattyFetch);

var _lie = require('lie');

var _lie2 = _interopRequireDefault(_lie);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by xy on 15/4/13.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var processData = _util2["default"].processData,
    transferDataToObj = _util2["default"].transferDataToObj,
    getValuePropValue = _util2["default"].getValuePropValue;
var Option = _uxcoreSelect2["default"].Option;

var selectOptions = ['onDeselect', 'getPopupContainer', 'multiple', 'filterOption', 'allowClear', 'combobox', 'searchPlaceholder', 'tags', 'disabled', 'showSearch', 'placeholder', 'optionLabelProp', 'maxTagTextLength', 'dropdownMatchSelectWidth', 'dropdownClassName', 'notFoundContent', 'labelInValue', 'defaultActiveFirstOption', 'onFocus', 'onBlur'];

var SelectFormField = function (_FormField) {
  _inherits(SelectFormField, _FormField);

  function SelectFormField(props) {
    _classCallCheck(this, SelectFormField);

    var _this = _possibleConstructorReturn(this, _FormField.call(this, props));

    var me = _this;
    (0, _objectAssign2["default"])(me.state, {
      data: processData(props.jsxdata)
    });
    return _this;
  }

  SelectFormField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var me = this;
    _FormField.prototype.componentWillReceiveProps.call(this, nextProps);
    if (!(0, _isEqual2["default"])(nextProps.jsxdata, me.props.jsxdata)) {
      me.setState({
        data: processData(nextProps.jsxdata)
      });
    }
  };

  SelectFormField.prototype.componentDidMount = function componentDidMount() {
    var me = this;
    if (me.props.jsxfetchUrl && me.props.fetchDataOnMount) {
      me.fetchData();
    }
    if (!me.props.standalone) {
      me.props.attachFormField(me);
      me.props.handleDataChange(me, {
        value: me.processValue(me.props.value),
        pass: true
      }, true);
    }
  };

  SelectFormField.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var jsxfetchUrl = this.props.jsxfetchUrl;

    if (jsxfetchUrl && prevProps.jsxfetchUrl !== jsxfetchUrl) {
      this.fetchData();
    }
  };

  /**
   * select inner method is used, not very reliable
   */

  SelectFormField.prototype.resetSelect = function resetSelect() {
    var me = this;
    var _me$props = me.props,
        multiple = _me$props.multiple,
        closeOnSelect = _me$props.closeOnSelect;

    if (multiple && closeOnSelect) {
      if (typeof me.select.setInputValue === 'function') {
        me.select.setInputValue('');
      } else {
        console.warn('select.setInputValue is invalid');
      }
      if (typeof me.select.setOpenState === 'function') {
        me.select.setOpenState(false, false);
      } else {
        console.warn('select.setOpenState is invalid');
      }
    }
  };

  SelectFormField.prototype.fetchData = function fetchData(value) {
    var me = this;
    if (me.fetch) {
      me.fetch.abort();
    }
    me.fetch = _nattyFetch2["default"].create({
      url: me.props.jsxfetchUrl,
      jsonp: me.props.dataType ? me.props.dataType === 'jsonp' : /\.jsonp/.test(me.props.jsxfetchUrl),
      data: me.props.beforeFetch({
        q: value
      }),
      fit: me.props.fitResponse,
      Promise: _lie2["default"]
    });
    me.fetch().then(function (content) {
      var fetchData = processData(me.props.afterFetch(content));
      if (me.props.jsxdata) {
        fetchData = processData(me.props.jsxdata).concat(fetchData);
      }
      me.setState({
        data: fetchData
      });
    })["catch"](function (e) {
      console.error(e.stack);
    });
  };

  SelectFormField.prototype.handleChange = function handleChange(value) {
    var me = this;
    me.handleDataChange(value);
  };

  SelectFormField.prototype.handleSearch = function handleSearch(value) {
    var me = this;
    if (me.searchTimer) {
      clearTimeout(me.searchTimer);
    }
    me.searchTimer = setTimeout(function () {
      if (me.props.jsxfetchUrl) {
        me.fetchData(value);
      } else if (me.props.onSearch) {
        me.props.onSearch(value);
      }
    }, me.props.searchDelay);
  };

  SelectFormField.prototype._generateOptionsFromData = function _generateOptionsFromData() {
    var me = this;
    var values = me.state.data;
    var children = me.props.children;
    if (!values.length) {
      // console.warn("You need to pass data to initialize Select.");
      if (children) {
        return children;
      }
    }
    var arr = values.map(function (item) {
      return _react2["default"].createElement(
        Option,
        { key: item.value, title: item.text, disabled: item.disabled },
        item.text
      );
    });
    return arr;
  };

  /**
   * transfer 'a' to { key: 'a' }
   * transfer ['a'] to [{ key: 'a' }]
   */


  SelectFormField.prototype.processValue = function processValue(value) {
    var me = this;
    var newValue = value;
    if (value === undefined) {
      newValue = me.state.value;
    }
    if (!me.props.jsxfetchUrl && !me.props.onSearch) {
      return newValue;
    }
    if (typeof newValue === 'string') {
      return {
        key: newValue
      };
    } else if (newValue instanceof Array) {
      return newValue.map(function (item) {
        if (typeof item === 'string') {
          return {
            key: item
          };
        }
        return item;
      });
    }
    return newValue;
  };

  SelectFormField.prototype.addSpecificClass = function addSpecificClass() {
    var me = this;
    if (me.props.jsxprefixCls === 'kuma-uxform-field') {
      return me.props.jsxprefixCls + ' kuma-select-uxform-field';
    }
    return me.props.jsxprefixCls;
  };

  SelectFormField.prototype.renderField = function renderField() {
    var _this2 = this;

    var me = this;
    var arr = [];
    var mode = me.props.jsxmode || me.props.mode;

    if (mode === _uxcoreConst2["default"].MODE.EDIT) {
      var options = {
        ref: function ref(c) {
          _this2.select = c;
        },
        key: 'select',
        optionLabelProp: me.props.optionLabelProp,
        style: me.props.jsxstyle,
        multiple: me.props.jsxmultiple,
        allowClear: me.props.jsxallowClear,
        combobox: me.props.jsxcombobox,
        searchPlaceholder: me.props.jsxsearchPlaceholder,
        tags: me.props.jsxtags,
        optionFilterProp: me.props.optionFilterProp,
        disabled: !!me.props.jsxdisabled,
        showSearch: me.props.jsxshowSearch,
        placeholder: me.props.jsxplaceholder,
        onChange: me.handleChange.bind(me),
        onSearch: me.handleSearch.bind(me),
        onSelect: function onSelect() {
          _this2.resetSelect();
          if (_this2.props.onSelect) {
            var _props;

            (_props = _this2.props).onSelect.apply(_props, arguments);
          }
        },
        size: me.getSize()
      };

      selectOptions.forEach(function (item) {
        if (item in me.props) {
          options[item] = me.props[item];
        }
      });

      // only jsxfetchUrl mode need pass label, for the options always change.
      // when mount, state.label is undefined, which cause defalutValue cannot be used.
      if (me.props.jsxfetchUrl || me.props.onSearch) {
        options.labelInValue = true;
      }

      // if (!me.props.combobox || me.state.fromReset) { // Why?
      options.value = me.processValue() || [];
      // }

      if (me.props.jsxfetchUrl) {
        options.filterOption = false;
      }
      /* eslint-disable no-underscore-dangle */
      /* used in SearchFormField */
      arr.push(_react2["default"].createElement(
        _uxcoreSelect2["default"],
        options,
        me._generateOptionsFromData()
      ));
      /* eslint-enable no-underscore-dangle */
    } else if (mode === _uxcoreConst2["default"].MODE.VIEW) {
      var str = '';
      if (me.state.value) {
        var value = me.processValue();
        var values = !Array.isArray(value) ? [value] : value;
        // labelInValue mode
        if (me.props.jsxfetchUrl || me.props.onSearch || me.props.labelInValue) {
          str = values.map(function (item) {
            return item.label || item.key;
          }).join(' ');
        } else if (me.props.children) {
          // <Option> mode
          if (me.props.children) {
            me.props.children.forEach(function (child) {
              var valuePropValue = getValuePropValue(child);
              if (values.indexOf(valuePropValue) !== -1) {
                str += child.props[me.props.optionLabelProp] + ' ';
              }
            });
            if (str === '') {
              str = values.join(' ');
            }
          }
        } else {
          // only jsxdata
          values.forEach(function (item) {
            var label = transferDataToObj(me.state.data)[item === '' ? '__all__' : item];
            str += (label || item) + ' ';
          });
        }
      }
      arr.push(_react2["default"].createElement(
        'span',
        { key: 'select' },
        str
      ));
    }
    return arr;
  };

  return SelectFormField;
}(_uxcoreFormField2["default"]);

SelectFormField.Option = Option;
SelectFormField.displayName = 'SelectFormField';
SelectFormField.propTypes = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].propTypes, {
  jsxstyle: _propTypes2["default"].object,
  jsxplaceholder: _propTypes2["default"].string,
  jsxcombobox: _propTypes2["default"].bool,
  jsxdata: _propTypes2["default"].oneOfType([_propTypes2["default"].object, _propTypes2["default"].array]),
  searchDelay: _propTypes2["default"].number,
  beforeFetch: _propTypes2["default"].func,
  afterFetch: _propTypes2["default"].func,
  jsxshowSearch: _propTypes2["default"].bool,
  jsxtags: _propTypes2["default"].bool,
  jsxmultiple: _propTypes2["default"].bool,
  jsxallowClear: _propTypes2["default"].bool,
  jsxsearchPlaceholder: _propTypes2["default"].string,
  optionFilterProp: _propTypes2["default"].string,
  dataType: _propTypes2["default"].string,
  fetchDataOnMount: _propTypes2["default"].bool
});

SelectFormField.defaultProps = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].defaultProps, {
  jsxstyle: {},
  jsxplaceholder: '请下拉选择',
  jsxcombobox: false,
  jsxdata: {},
  searchDelay: 100,
  beforeFetch: function beforeFetch(obj) {
    return obj;
  },
  afterFetch: function afterFetch(obj) {
    return obj;
  },
  fitResponse: function fitResponse(response) {
    return {
      content: response.content || response,
      success: response.success === undefined ? true : response.success
    };
  },
  jsxshowSearch: true,
  jsxallowClear: false,
  jsxtags: false,
  jsxmultiple: false,
  jsxsearchPlaceholder: '',
  optionFilterProp: 'children',
  optionLabelProp: 'children',
  fetchDataOnMount: true
});

exports["default"] = SelectFormField;
module.exports = exports['default'];